package co.edu.unab.leal.jakson.ruletapp.modelo;

import java.lang.reflect.Array;
import java.util.ArrayList;

public class Base {
    static int[][] posiblesJugadas = new int[38][];
    public ArrayList<Integer> auxListDB = new ArrayList<>();

    public void matrizInicio() {
        int[][] iArr = posiblesJugadas;
        iArr[0][0] = 2;
        iArr[1][0] = 0;
        iArr[2][0] = 28;
        iArr[3][0] = 9;
        iArr[4][0] = 26;
        iArr[5][0] = 30;
        iArr[6][0] = 11;
        iArr[7][0] = 7;
        iArr[8][0] = 20;
        iArr[9][0] = 32;
        iArr[10][0] = 17;
        iArr[11][0] = 5;
        iArr[12][0] = 22;
        iArr[13][0] = 34;
        iArr[14][0] = 15;
        iArr[15][0] = 3;
        iArr[16][0] = 24;
        iArr[17][0] = 36;
        iArr[18][0] = 13;
        iArr[19][0] = 1;
        iArr[20][0] = 37;
        iArr[21][0] = 27;
        iArr[22][0] = 10;
        iArr[23][0] = 25;
        iArr[24][0] = 29;
        iArr[25][0] = 12;
        iArr[26][0] = 8;
        iArr[27][0] = 19;
        iArr[28][0] = 31;
        iArr[29][0] = 18;
        iArr[30][0] = 6;
        iArr[31][0] = 21;
        iArr[32][0] = 33;
        iArr[33][0] = 16;
        iArr[34][0] = 4;
        iArr[35][0] = 23;
        iArr[36][0] = 35;
        iArr[37][0] = 14;
    }

    public void matrizBase2() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[0] = new int[68];
        iArr[0][1] = 0;
        iArr[0][2] = 0;
        iArr[0][3] = 1;
        iArr[0][4] = 2;
        iArr[0][5] = 2;
        iArr[0][6] = 3;
        iArr[0][7] = 3;
        iArr[0][8] = 4;
        iArr[0][9] = 4;
        iArr[0][10] = 5;
        iArr[0][11] = 5;
        iArr[0][12] = 5;
        iArr[0][13] = 7;
        iArr[0][14] = 7;
        iArr[0][15] = 7;
        iArr[0][16] = 8;
        iArr[0][17] = 10;
        iArr[0][18] = 10;
        iArr[0][19] = 11;
        iArr[0][20] = 11;
        iArr[0][21] = 12;
        iArr[0][22] = 13;
        iArr[0][23] = 14;
        iArr[0][24] = 14;
        iArr[0][25] = 14;
        iArr[0][26] = 15;
        iArr[0][27] = 15;
        iArr[0][28] = 16;
        iArr[0][29] = 17;
        iArr[0][30] = 17;
        iArr[0][31] = 17;
        iArr[0][32] = 18;
        iArr[0][33] = 19;
        iArr[0][34] = 20;
        iArr[0][35] = 20;
        iArr[0][36] = 20;
        iArr[0][37] = 20;
        iArr[0][38] = 22;
        iArr[0][39] = 22;
        iArr[0][40] = 22;
        iArr[0][41] = 22;
        iArr[0][42] = 23;
        iArr[0][43] = 23;
        iArr[0][44] = 23;
        iArr[0][45] = 24;
        iArr[0][46] = 25;
        iArr[0][47] = 25;
        iArr[0][48] = 26;
        iArr[0][49] = 27;
        iArr[0][50] = 28;
        iArr[0][51] = 29;
        iArr[0][52] = 29;
        iArr[0][53] = 30;
        iArr[0][54] = 30;
        iArr[0][55] = 31;
        iArr[0][56] = 32;
        iArr[0][57] = 32;
        iArr[0][58] = 32;
        iArr[0][59] = 32;
        iArr[0][60] = 34;
        iArr[0][61] = 34;
        iArr[0][62] = 34;
        iArr[0][63] = 34;
        iArr[0][64] = 35;
        iArr[0][65] = 35;
        iArr[0][66] = 36;
        iArr[0][67] = 36;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[0].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[0][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase0() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[1] = new int[64];
        iArr[1][1] = 0;
        iArr[1][2] = 0;
        iArr[1][3] = 0;
        iArr[1][4] = 0;
        iArr[1][5] = 2;
        iArr[1][6] = 2;
        iArr[1][7] = 2;
        iArr[1][8] = 5;
        iArr[1][9] = 5;
        iArr[1][10] = 6;
        iArr[1][11] = 7;
        iArr[1][12] = 7;
        iArr[1][13] = 7;
        iArr[1][14] = 7;
        iArr[1][15] = 8;
        iArr[1][16] = 8;
        iArr[1][17] = 8;
        iArr[1][18] = 9;
        iArr[1][19] = 9;
        iArr[1][20] = 10;
        iArr[1][21] = 10;
        iArr[1][22] = 11;
        iArr[1][23] = 11;
        iArr[1][24] = 11;
        iArr[1][25] = 12;
        iArr[1][26] = 12;
        iArr[1][27] = 14;
        iArr[1][28] = 14;
        iArr[1][29] = 17;
        iArr[1][30] = 17;
        iArr[1][31] = 18;
        iArr[1][32] = 19;
        iArr[1][33] = 19;
        iArr[1][34] = 20;
        iArr[1][35] = 20;
        iArr[1][36] = 20;
        iArr[1][37] = 20;
        iArr[1][38] = 22;
        iArr[1][39] = 23;
        iArr[1][40] = 25;
        iArr[1][41] = 25;
        iArr[1][42] = 26;
        iArr[1][43] = 26;
        iArr[1][44] = 26;
        iArr[1][45] = 27;
        iArr[1][46] = 27;
        iArr[1][47] = 28;
        iArr[1][48] = 28;
        iArr[1][49] = 28;
        iArr[1][50] = 29;
        iArr[1][51] = 30;
        iArr[1][52] = 30;
        iArr[1][53] = 30;
        iArr[1][54] = 30;
        iArr[1][55] = 31;
        iArr[1][56] = 31;
        iArr[1][57] = 32;
        iArr[1][58] = 32;
        iArr[1][59] = 32;
        iArr[1][60] = 32;
        iArr[1][61] = 32;
        iArr[1][62] = 34;
        iArr[1][63] = 35;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[1].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[1][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase28() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[2] = new int[64];
        iArr[2][1] = 0;
        iArr[2][2] = 0;
        iArr[2][3] = 0;
        iArr[2][4] = 2;
        iArr[2][5] = 2;
        iArr[2][6] = 5;
        iArr[2][7] = 6;
        iArr[2][8] = 6;
        iArr[2][9] = 7;
        iArr[2][10] = 7;
        iArr[2][11] = 8;
        iArr[2][12] = 8;
        iArr[2][13] = 8;
        iArr[2][14] = 9;
        iArr[2][15] = 9;
        iArr[2][16] = 9;
        iArr[2][17] = 10;
        iArr[2][18] = 10;
        iArr[2][19] = 10;
        iArr[2][20] = 11;
        iArr[2][21] = 11;
        iArr[2][22] = 12;
        iArr[2][23] = 12;
        iArr[2][24] = 13;
        iArr[2][25] = 14;
        iArr[2][26] = 17;
        iArr[2][27] = 18;
        iArr[2][28] = 18;
        iArr[2][29] = 19;
        iArr[2][30] = 19;
        iArr[2][31] = 19;
        iArr[2][32] = 20;
        iArr[2][33] = 20;
        iArr[2][34] = 23;
        iArr[2][35] = 24;
        iArr[2][36] = 25;
        iArr[2][37] = 25;
        iArr[2][38] = 25;
        iArr[2][39] = 26;
        iArr[2][40] = 26;
        iArr[2][41] = 26;
        iArr[2][42] = 26;
        iArr[2][43] = 27;
        iArr[2][44] = 27;
        iArr[2][45] = 27;
        iArr[2][46] = 28;
        iArr[2][47] = 28;
        iArr[2][48] = 28;
        iArr[2][49] = 28;
        iArr[2][50] = 29;
        iArr[2][51] = 30;
        iArr[2][52] = 30;
        iArr[2][53] = 30;
        iArr[2][54] = 31;
        iArr[2][55] = 31;
        iArr[2][56] = 31;
        iArr[2][57] = 31;
        iArr[2][58] = 32;
        iArr[2][59] = 32;
        iArr[2][60] = 32;
        iArr[2][61] = 35;
        iArr[2][62] = 36;
        iArr[2][63] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[2].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[2][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase9() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[3] = new int[88];
        iArr[3][1] = 0;
        iArr[3][2] = 0;
        iArr[3][3] = 0;
        iArr[3][4] = 2;
        iArr[3][5] = 3;
        iArr[3][6] = 3;
        iArr[3][7] = 4;
        iArr[3][8] = 5;
        iArr[3][9] = 5;
        iArr[3][10] = 6;
        iArr[3][11] = 6;
        iArr[3][12] = 6;
        iArr[3][13] = 6;
        iArr[3][14] = 7;
        iArr[3][15] = 8;
        iArr[3][16] = 8;
        iArr[3][17] = 8;
        iArr[3][18] = 8;
        iArr[3][19] = 9;
        iArr[3][20] = 9;
        iArr[3][21] = 9;
        iArr[3][22] = 9;
        iArr[3][23] = 9;
        iArr[3][24] = 10;
        iArr[3][25] = 10;
        iArr[3][26] = 11;
        iArr[3][27] = 12;
        iArr[3][28] = 12;
        iArr[3][29] = 12;
        iArr[3][30] = 13;
        iArr[3][31] = 13;
        iArr[3][32] = 14;
        iArr[3][33] = 14;
        iArr[3][34] = 15;
        iArr[3][35] = 16;
        iArr[3][36] = 16;
        iArr[3][37] = 17;
        iArr[3][38] = 17;
        iArr[3][39] = 18;
        iArr[3][40] = 18;
        iArr[3][41] = 18;
        iArr[3][42] = 18;
        iArr[3][43] = 19;
        iArr[3][44] = 19;
        iArr[3][45] = 19;
        iArr[3][46] = 19;
        iArr[3][47] = 20;
        iArr[3][48] = 21;
        iArr[3][49] = 21;
        iArr[3][50] = 23;
        iArr[3][51] = 23;
        iArr[3][52] = 24;
        iArr[3][53] = 24;
        iArr[3][54] = 24;
        iArr[3][55] = 25;
        iArr[3][56] = 25;
        iArr[3][57] = 26;
        iArr[3][58] = 26;
        iArr[3][59] = 26;
        iArr[3][60] = 26;
        iArr[3][61] = 27;
        iArr[3][62] = 27;
        iArr[3][63] = 28;
        iArr[3][64] = 28;
        iArr[3][65] = 28;
        iArr[3][66] = 28;
        iArr[3][67] = 29;
        iArr[3][68] = 30;
        iArr[3][69] = 30;
        iArr[3][70] = 30;
        iArr[3][71] = 31;
        iArr[3][72] = 31;
        iArr[3][73] = 31;
        iArr[3][74] = 31;
        iArr[3][75] = 31;
        iArr[3][76] = 32;
        iArr[3][77] = 32;
        iArr[3][78] = 32;
        iArr[3][79] = 33;
        iArr[3][80] = 33;
        iArr[3][81] = 34;
        iArr[3][82] = 35;
        iArr[3][83] = 35;
        iArr[3][84] = 36;
        iArr[3][85] = 36;
        iArr[3][86] = 36;
        iArr[3][87] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[3].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[3][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase26() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[4] = new int[85];
        iArr[4][1] = 0;
        iArr[4][2] = 0;
        iArr[4][3] = 1;
        iArr[4][4] = 2;
        iArr[4][5] = 3;
        iArr[4][6] = 3;
        iArr[4][7] = 3;
        iArr[4][8] = 4;
        iArr[4][9] = 4;
        iArr[4][10] = 5;
        iArr[4][11] = 6;
        iArr[4][12] = 6;
        iArr[4][13] = 6;
        iArr[4][14] = 6;
        iArr[4][15] = 7;
        iArr[4][16] = 8;
        iArr[4][17] = 8;
        iArr[4][18] = 8;
        iArr[4][19] = 9;
        iArr[4][20] = 9;
        iArr[4][21] = 9;
        iArr[4][22] = 10;
        iArr[4][23] = 10;
        iArr[4][24] = 11;
        iArr[4][25] = 12;
        iArr[4][26] = 12;
        iArr[4][27] = 12;
        iArr[4][28] = 13;
        iArr[4][29] = 13;
        iArr[4][30] = 13;
        iArr[4][31] = 14;
        iArr[4][32] = 15;
        iArr[4][33] = 15;
        iArr[4][34] = 16;
        iArr[4][35] = 16;
        iArr[4][36] = 16;
        iArr[4][37] = 17;
        iArr[4][38] = 18;
        iArr[4][39] = 18;
        iArr[4][40] = 18;
        iArr[4][41] = 19;
        iArr[4][42] = 19;
        iArr[4][43] = 20;
        iArr[4][44] = 21;
        iArr[4][45] = 21;
        iArr[4][46] = 21;
        iArr[4][47] = 21;
        iArr[4][48] = 23;
        iArr[4][49] = 23;
        iArr[4][50] = 24;
        iArr[4][51] = 24;
        iArr[4][52] = 24;
        iArr[4][53] = 24;
        iArr[4][54] = 25;
        iArr[4][55] = 25;
        iArr[4][56] = 26;
        iArr[4][57] = 26;
        iArr[4][58] = 26;
        iArr[4][59] = 27;
        iArr[4][60] = 27;
        iArr[4][61] = 28;
        iArr[4][62] = 28;
        iArr[4][63] = 28;
        iArr[4][64] = 29;
        iArr[4][65] = 29;
        iArr[4][66] = 30;
        iArr[4][67] = 30;
        iArr[4][68] = 31;
        iArr[4][69] = 31;
        iArr[4][70] = 31;
        iArr[4][71] = 32;
        iArr[4][72] = 32;
        iArr[4][73] = 33;
        iArr[4][74] = 33;
        iArr[4][75] = 33;
        iArr[4][76] = 33;
        iArr[4][77] = 34;
        iArr[4][78] = 35;
        iArr[4][79] = 35;
        iArr[4][80] = 36;
        iArr[4][81] = 36;
        iArr[4][82] = 36;
        iArr[4][83] = 36;
        iArr[4][84] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[4].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[4][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase30() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[5] = new int[97];
        iArr[5][1] = 0;
        iArr[5][2] = 0;
        iArr[5][3] = 0;
        iArr[5][4] = 1;
        iArr[5][5] = 1;
        iArr[5][6] = 2;
        iArr[5][7] = 2;
        iArr[5][8] = 3;
        iArr[5][9] = 3;
        iArr[5][10] = 3;
        iArr[5][11] = 4;
        iArr[5][12] = 4;
        iArr[5][13] = 5;
        iArr[5][14] = 5;
        iArr[5][15] = 6;
        iArr[5][16] = 6;
        iArr[5][17] = 6;
        iArr[5][18] = 6;
        iArr[5][19] = 7;
        iArr[5][20] = 7;
        iArr[5][21] = 7;
        iArr[5][22] = 8;
        iArr[5][23] = 8;
        iArr[5][24] = 8;
        iArr[5][25] = 9;
        iArr[5][26] = 9;
        iArr[5][27] = 10;
        iArr[5][28] = 10;
        iArr[5][29] = 11;
        iArr[5][30] = 11;
        iArr[5][31] = 12;
        iArr[5][32] = 12;
        iArr[5][33] = 12;
        iArr[5][34] = 13;
        iArr[5][35] = 13;
        iArr[5][36] = 13;
        iArr[5][37] = 14;
        iArr[5][38] = 14;
        iArr[5][39] = 15;
        iArr[5][40] = 15;
        iArr[5][41] = 16;
        iArr[5][42] = 16;
        iArr[5][43] = 16;
        iArr[5][44] = 17;
        iArr[5][45] = 17;
        iArr[5][46] = 18;
        iArr[5][47] = 18;
        iArr[5][48] = 18;
        iArr[5][49] = 19;
        iArr[5][50] = 19;
        iArr[5][51] = 20;
        iArr[5][52] = 20;
        iArr[5][53] = 20;
        iArr[5][54] = 21;
        iArr[5][55] = 21;
        iArr[5][56] = 21;
        iArr[5][57] = 21;
        iArr[5][58] = 21;
        iArr[5][59] = 22;
        iArr[5][60] = 23;
        iArr[5][61] = 23;
        iArr[5][62] = 24;
        iArr[5][63] = 24;
        iArr[5][64] = 24;
        iArr[5][65] = 25;
        iArr[5][66] = 25;
        iArr[5][67] = 26;
        iArr[5][68] = 26;
        iArr[5][69] = 27;
        iArr[5][70] = 27;
        iArr[5][71] = 28;
        iArr[5][72] = 28;
        iArr[5][73] = 29;
        iArr[5][74] = 29;
        iArr[5][75] = 30;
        iArr[5][76] = 30;
        iArr[5][77] = 30;
        iArr[5][78] = 31;
        iArr[5][79] = 31;
        iArr[5][80] = 32;
        iArr[5][81] = 32;
        iArr[5][82] = 32;
        iArr[5][83] = 32;
        iArr[5][84] = 33;
        iArr[5][85] = 33;
        iArr[5][86] = 33;
        iArr[5][87] = 33;
        iArr[5][88] = 33;
        iArr[5][89] = 34;
        iArr[5][90] = 34;
        iArr[5][91] = 35;
        iArr[5][92] = 35;
        iArr[5][93] = 36;
        iArr[5][94] = 36;
        iArr[5][95] = 36;
        iArr[5][96] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[5].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[5][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase11() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[6] = new int[82];
        iArr[6][1] = 0;
        iArr[6][2] = 0;
        iArr[6][3] = 1;
        iArr[6][4] = 1;
        iArr[6][5] = 1;
        iArr[6][6] = 2;
        iArr[6][7] = 2;
        iArr[6][8] = 3;
        iArr[6][9] = 4;
        iArr[6][10] = 4;
        iArr[6][11] = 5;
        iArr[6][12] = 5;
        iArr[6][13] = 6;
        iArr[6][14] = 6;
        iArr[6][15] = 7;
        iArr[6][16] = 7;
        iArr[6][17] = 7;
        iArr[6][18] = 7;
        iArr[6][19] = 8;
        iArr[6][20] = 8;
        iArr[6][21] = 10;
        iArr[6][22] = 10;
        iArr[6][23] = 10;
        iArr[6][24] = 10;
        iArr[6][25] = 11;
        iArr[6][26] = 11;
        iArr[6][27] = 11;
        iArr[6][28] = 12;
        iArr[6][29] = 12;
        iArr[6][30] = 13;
        iArr[6][31] = 13;
        iArr[6][32] = 14;
        iArr[6][33] = 15;
        iArr[6][34] = 15;
        iArr[6][35] = 16;
        iArr[6][36] = 16;
        iArr[6][37] = 17;
        iArr[6][38] = 17;
        iArr[6][39] = 18;
        iArr[6][40] = 19;
        iArr[6][41] = 20;
        iArr[6][42] = 20;
        iArr[6][43] = 20;
        iArr[6][44] = 20;
        iArr[6][45] = 21;
        iArr[6][46] = 21;
        iArr[6][47] = 21;
        iArr[6][48] = 22;
        iArr[6][49] = 22;
        iArr[6][50] = 23;
        iArr[6][51] = 24;
        iArr[6][52] = 25;
        iArr[6][53] = 25;
        iArr[6][54] = 25;
        iArr[6][55] = 26;
        iArr[6][56] = 27;
        iArr[6][57] = 27;
        iArr[6][58] = 27;
        iArr[6][59] = 27;
        iArr[6][60] = 28;
        iArr[6][61] = 29;
        iArr[6][62] = 29;
        iArr[6][63] = 29;
        iArr[6][64] = 30;
        iArr[6][65] = 30;
        iArr[6][66] = 31;
        iArr[6][67] = 32;
        iArr[6][68] = 32;
        iArr[6][69] = 32;
        iArr[6][70] = 32;
        iArr[6][71] = 33;
        iArr[6][72] = 33;
        iArr[6][73] = 33;
        iArr[6][74] = 33;
        iArr[6][75] = 34;
        iArr[6][76] = 34;
        iArr[6][77] = 35;
        iArr[6][78] = 36;
        iArr[6][79] = 37;
        iArr[6][80] = 37;
        iArr[6][81] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[6].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[6][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase7() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[7] = new int[79];
        iArr[7][1] = 0;
        iArr[7][2] = 0;
        iArr[7][3] = 0;
        iArr[7][4] = 1;
        iArr[7][5] = 1;
        iArr[7][6] = 2;
        iArr[7][7] = 2;
        iArr[7][8] = 2;
        iArr[7][9] = 4;
        iArr[7][10] = 5;
        iArr[7][11] = 5;
        iArr[7][12] = 5;
        iArr[7][13] = 6;
        iArr[7][14] = 7;
        iArr[7][15] = 7;
        iArr[7][16] = 7;
        iArr[7][17] = 7;
        iArr[7][18] = 7;
        iArr[7][19] = 8;
        iArr[7][20] = 8;
        iArr[7][21] = 10;
        iArr[7][22] = 10;
        iArr[7][23] = 10;
        iArr[7][24] = 10;
        iArr[7][25] = 11;
        iArr[7][26] = 11;
        iArr[7][27] = 11;
        iArr[7][28] = 11;
        iArr[7][29] = 12;
        iArr[7][30] = 12;
        iArr[7][31] = 13;
        iArr[7][32] = 14;
        iArr[7][33] = 14;
        iArr[7][34] = 15;
        iArr[7][35] = 16;
        iArr[7][36] = 17;
        iArr[7][37] = 17;
        iArr[7][38] = 17;
        iArr[7][39] = 18;
        iArr[7][40] = 19;
        iArr[7][41] = 20;
        iArr[7][42] = 20;
        iArr[7][43] = 20;
        iArr[7][44] = 20;
        iArr[7][45] = 20;
        iArr[7][46] = 21;
        iArr[7][47] = 22;
        iArr[7][48] = 22;
        iArr[7][49] = 22;
        iArr[7][50] = 25;
        iArr[7][51] = 25;
        iArr[7][52] = 25;
        iArr[7][53] = 26;
        iArr[7][54] = 27;
        iArr[7][55] = 27;
        iArr[7][56] = 27;
        iArr[7][57] = 27;
        iArr[7][58] = 28;
        iArr[7][59] = 29;
        iArr[7][60] = 29;
        iArr[7][61] = 29;
        iArr[7][62] = 30;
        iArr[7][63] = 30;
        iArr[7][64] = 30;
        iArr[7][65] = 31;
        iArr[7][66] = 32;
        iArr[7][67] = 32;
        iArr[7][68] = 32;
        iArr[7][69] = 32;
        iArr[7][70] = 32;
        iArr[7][71] = 33;
        iArr[7][72] = 33;
        iArr[7][73] = 34;
        iArr[7][74] = 34;
        iArr[7][75] = 34;
        iArr[7][76] = 37;
        iArr[7][77] = 37;
        iArr[7][78] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[7].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[7][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase20() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[8] = new int[83];
        iArr[8][1] = 0;
        iArr[8][2] = 0;
        iArr[8][3] = 0;
        iArr[8][4] = 1;
        iArr[8][5] = 2;
        iArr[8][6] = 2;
        iArr[8][7] = 2;
        iArr[8][8] = 3;
        iArr[8][9] = 4;
        iArr[8][10] = 4;
        iArr[8][11] = 5;
        iArr[8][12] = 5;
        iArr[8][13] = 5;
        iArr[8][14] = 5;
        iArr[8][15] = 7;
        iArr[8][16] = 7;
        iArr[8][17] = 7;
        iArr[8][18] = 7;
        iArr[8][19] = 7;
        iArr[8][20] = 8;
        iArr[8][21] = 8;
        iArr[8][22] = 10;
        iArr[8][23] = 10;
        iArr[8][24] = 10;
        iArr[8][25] = 10;
        iArr[8][26] = 11;
        iArr[8][27] = 11;
        iArr[8][28] = 11;
        iArr[8][29] = 11;
        iArr[8][30] = 12;
        iArr[8][31] = 12;
        iArr[8][32] = 14;
        iArr[8][33] = 14;
        iArr[8][34] = 14;
        iArr[8][35] = 14;
        iArr[8][36] = 15;
        iArr[8][37] = 15;
        iArr[8][38] = 16;
        iArr[8][39] = 17;
        iArr[8][40] = 17;
        iArr[8][41] = 17;
        iArr[8][42] = 17;
        iArr[8][43] = 20;
        iArr[8][44] = 20;
        iArr[8][45] = 20;
        iArr[8][46] = 20;
        iArr[8][47] = 20;
        iArr[8][48] = 22;
        iArr[8][49] = 22;
        iArr[8][50] = 22;
        iArr[8][51] = 22;
        iArr[8][52] = 23;
        iArr[8][53] = 23;
        iArr[8][54] = 25;
        iArr[8][55] = 25;
        iArr[8][56] = 25;
        iArr[8][57] = 26;
        iArr[8][58] = 27;
        iArr[8][59] = 27;
        iArr[8][60] = 27;
        iArr[8][61] = 28;
        iArr[8][62] = 29;
        iArr[8][63] = 29;
        iArr[8][64] = 29;
        iArr[8][65] = 29;
        iArr[8][66] = 30;
        iArr[8][67] = 30;
        iArr[8][68] = 30;
        iArr[8][69] = 32;
        iArr[8][70] = 32;
        iArr[8][71] = 32;
        iArr[8][72] = 32;
        iArr[8][73] = 32;
        iArr[8][74] = 33;
        iArr[8][75] = 34;
        iArr[8][76] = 34;
        iArr[8][77] = 34;
        iArr[8][78] = 34;
        iArr[8][79] = 35;
        iArr[8][80] = 35;
        iArr[8][81] = 37;
        iArr[8][82] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[8].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[8][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase32() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[9] = new int[98];
        iArr[9][1] = 0;
        iArr[9][2] = 0;
        iArr[9][3] = 0;
        iArr[9][4] = 0;
        iArr[9][5] = 1;
        iArr[9][6] = 2;
        iArr[9][7] = 2;
        iArr[9][8] = 2;
        iArr[9][9] = 3;
        iArr[9][10] = 4;
        iArr[9][11] = 4;
        iArr[9][12] = 5;
        iArr[9][13] = 5;
        iArr[9][14] = 5;
        iArr[9][15] = 5;
        iArr[9][16] = 6;
        iArr[9][17] = 7;
        iArr[9][18] = 7;
        iArr[9][19] = 7;
        iArr[9][20] = 7;
        iArr[9][21] = 7;
        iArr[9][22] = 8;
        iArr[9][23] = 8;
        iArr[9][24] = 8;
        iArr[9][25] = 9;
        iArr[9][26] = 9;
        iArr[9][27] = 10;
        iArr[9][28] = 10;
        iArr[9][29] = 10;
        iArr[9][30] = 10;
        iArr[9][31] = 11;
        iArr[9][32] = 11;
        iArr[9][33] = 11;
        iArr[9][34] = 11;
        iArr[9][35] = 12;
        iArr[9][36] = 12;
        iArr[9][37] = 12;
        iArr[9][38] = 14;
        iArr[9][39] = 14;
        iArr[9][40] = 14;
        iArr[9][41] = 14;
        iArr[9][42] = 14;
        iArr[9][43] = 15;
        iArr[9][44] = 15;
        iArr[9][45] = 16;
        iArr[9][46] = 17;
        iArr[9][47] = 17;
        iArr[9][48] = 17;
        iArr[9][49] = 17;
        iArr[9][50] = 18;
        iArr[9][51] = 19;
        iArr[9][52] = 20;
        iArr[9][53] = 20;
        iArr[9][54] = 20;
        iArr[9][55] = 20;
        iArr[9][56] = 20;
        iArr[9][57] = 22;
        iArr[9][58] = 22;
        iArr[9][59] = 22;
        iArr[9][60] = 22;
        iArr[9][61] = 23;
        iArr[9][62] = 23;
        iArr[9][63] = 23;
        iArr[9][64] = 25;
        iArr[9][65] = 25;
        iArr[9][66] = 25;
        iArr[9][67] = 26;
        iArr[9][68] = 26;
        iArr[9][69] = 27;
        iArr[9][70] = 27;
        iArr[9][71] = 27;
        iArr[9][72] = 28;
        iArr[9][73] = 28;
        iArr[9][74] = 29;
        iArr[9][75] = 29;
        iArr[9][76] = 29;
        iArr[9][77] = 29;
        iArr[9][78] = 30;
        iArr[9][79] = 30;
        iArr[9][80] = 30;
        iArr[9][81] = 30;
        iArr[9][82] = 31;
        iArr[9][83] = 32;
        iArr[9][84] = 32;
        iArr[9][85] = 32;
        iArr[9][86] = 32;
        iArr[9][87] = 32;
        iArr[9][88] = 33;
        iArr[9][89] = 34;
        iArr[9][90] = 34;
        iArr[9][91] = 34;
        iArr[9][92] = 34;
        iArr[9][93] = 35;
        iArr[9][94] = 35;
        iArr[9][95] = 35;
        iArr[9][96] = 37;
        iArr[9][97] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[9].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[9][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase17() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[10] = new int[90];
        iArr[10][1] = 0;
        iArr[10][2] = 0;
        iArr[10][3] = 1;
        iArr[10][4] = 2;
        iArr[10][5] = 3;
        iArr[10][6] = 3;
        iArr[10][7] = 4;
        iArr[10][8] = 4;
        iArr[10][9] = 4;
        iArr[10][10] = 5;
        iArr[10][11] = 5;
        iArr[10][12] = 5;
        iArr[10][13] = 5;
        iArr[10][14] = 6;
        iArr[10][15] = 7;
        iArr[10][16] = 7;
        iArr[10][17] = 7;
        iArr[10][18] = 8;
        iArr[10][19] = 8;
        iArr[10][20] = 9;
        iArr[10][21] = 9;
        iArr[10][22] = 10;
        iArr[10][23] = 10;
        iArr[10][24] = 10;
        iArr[10][25] = 10;
        iArr[10][26] = 11;
        iArr[10][27] = 11;
        iArr[10][28] = 12;
        iArr[10][29] = 12;
        iArr[10][30] = 14;
        iArr[10][31] = 14;
        iArr[10][32] = 14;
        iArr[10][33] = 14;
        iArr[10][34] = 14;
        iArr[10][35] = 14;
        iArr[10][36] = 15;
        iArr[10][37] = 15;
        iArr[10][38] = 15;
        iArr[10][39] = 16;
        iArr[10][40] = 17;
        iArr[10][41] = 17;
        iArr[10][42] = 17;
        iArr[10][43] = 17;
        iArr[10][44] = 17;
        iArr[10][45] = 18;
        iArr[10][46] = 19;
        iArr[10][47] = 20;
        iArr[10][48] = 20;
        iArr[10][49] = 20;
        iArr[10][50] = 20;
        iArr[10][51] = 22;
        iArr[10][52] = 22;
        iArr[10][53] = 22;
        iArr[10][54] = 22;
        iArr[10][55] = 23;
        iArr[10][56] = 23;
        iArr[10][57] = 23;
        iArr[10][58] = 23;
        iArr[10][59] = 23;
        iArr[10][60] = 25;
        iArr[10][61] = 25;
        iArr[10][62] = 25;
        iArr[10][63] = 26;
        iArr[10][64] = 27;
        iArr[10][65] = 27;
        iArr[10][66] = 28;
        iArr[10][67] = 29;
        iArr[10][68] = 29;
        iArr[10][69] = 29;
        iArr[10][70] = 29;
        iArr[10][71] = 30;
        iArr[10][72] = 30;
        iArr[10][73] = 31;
        iArr[10][74] = 32;
        iArr[10][75] = 32;
        iArr[10][76] = 32;
        iArr[10][77] = 32;
        iArr[10][78] = 33;
        iArr[10][79] = 34;
        iArr[10][80] = 34;
        iArr[10][81] = 34;
        iArr[10][82] = 34;
        iArr[10][83] = 35;
        iArr[10][84] = 35;
        iArr[10][85] = 35;
        iArr[10][86] = 35;
        iArr[10][87] = 35;
        iArr[10][88] = 37;
        iArr[10][89] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[10].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[10][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase5() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[11] = new int[90];
        iArr[11][1] = 0;
        iArr[11][2] = 0;
        iArr[11][3] = 1;
        iArr[11][4] = 1;
        iArr[11][5] = 2;
        iArr[11][6] = 3;
        iArr[11][7] = 3;
        iArr[11][8] = 4;
        iArr[11][9] = 4;
        iArr[11][10] = 4;
        iArr[11][11] = 5;
        iArr[11][12] = 5;
        iArr[11][13] = 5;
        iArr[11][14] = 6;
        iArr[11][15] = 7;
        iArr[11][16] = 7;
        iArr[11][17] = 7;
        iArr[11][18] = 8;
        iArr[11][19] = 8;
        iArr[11][20] = 9;
        iArr[11][21] = 9;
        iArr[11][22] = 10;
        iArr[11][23] = 10;
        iArr[11][24] = 10;
        iArr[11][25] = 11;
        iArr[11][26] = 11;
        iArr[11][27] = 12;
        iArr[11][28] = 12;
        iArr[11][29] = 13;
        iArr[11][30] = 14;
        iArr[11][31] = 14;
        iArr[11][32] = 14;
        iArr[11][33] = 14;
        iArr[11][34] = 14;
        iArr[11][35] = 15;
        iArr[11][36] = 15;
        iArr[11][37] = 15;
        iArr[11][38] = 16;
        iArr[11][39] = 16;
        iArr[11][40] = 17;
        iArr[11][41] = 17;
        iArr[11][42] = 17;
        iArr[11][43] = 17;
        iArr[11][44] = 18;
        iArr[11][45] = 18;
        iArr[11][46] = 19;
        iArr[11][47] = 19;
        iArr[11][48] = 20;
        iArr[11][49] = 20;
        iArr[11][50] = 20;
        iArr[11][51] = 20;
        iArr[11][52] = 22;
        iArr[11][53] = 22;
        iArr[11][54] = 22;
        iArr[11][55] = 22;
        iArr[11][56] = 23;
        iArr[11][57] = 23;
        iArr[11][58] = 23;
        iArr[11][59] = 23;
        iArr[11][60] = 24;
        iArr[11][61] = 25;
        iArr[11][62] = 25;
        iArr[11][63] = 26;
        iArr[11][64] = 27;
        iArr[11][65] = 27;
        iArr[11][66] = 28;
        iArr[11][67] = 29;
        iArr[11][68] = 29;
        iArr[11][69] = 29;
        iArr[11][70] = 30;
        iArr[11][71] = 30;
        iArr[11][72] = 31;
        iArr[11][73] = 31;
        iArr[11][74] = 32;
        iArr[11][75] = 32;
        iArr[11][76] = 32;
        iArr[11][77] = 32;
        iArr[11][78] = 33;
        iArr[11][79] = 34;
        iArr[11][80] = 34;
        iArr[11][81] = 34;
        iArr[11][82] = 34;
        iArr[11][83] = 35;
        iArr[11][84] = 35;
        iArr[11][85] = 35;
        iArr[11][86] = 36;
        iArr[11][87] = 36;
        iArr[11][88] = 37;
        iArr[11][89] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[11].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[11][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase22() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[12] = new int[91];
        iArr[12][1] = 0;
        iArr[12][2] = 1;
        iArr[12][3] = 1;
        iArr[12][4] = 1;
        iArr[12][5] = 2;
        iArr[12][6] = 3;
        iArr[12][7] = 3;
        iArr[12][8] = 3;
        iArr[12][9] = 4;
        iArr[12][10] = 4;
        iArr[12][11] = 4;
        iArr[12][12] = 4;
        iArr[12][13] = 5;
        iArr[12][14] = 5;
        iArr[12][15] = 5;
        iArr[12][16] = 5;
        iArr[12][17] = 7;
        iArr[12][18] = 7;
        iArr[12][19] = 7;
        iArr[12][20] = 8;
        iArr[12][21] = 10;
        iArr[12][22] = 10;
        iArr[12][23] = 10;
        iArr[12][24] = 11;
        iArr[12][25] = 11;
        iArr[12][26] = 12;
        iArr[12][27] = 13;
        iArr[12][28] = 13;
        iArr[12][29] = 14;
        iArr[12][30] = 14;
        iArr[12][31] = 14;
        iArr[12][32] = 14;
        iArr[12][33] = 14;
        iArr[12][34] = 15;
        iArr[12][35] = 15;
        iArr[12][36] = 15;
        iArr[12][37] = 16;
        iArr[12][38] = 16;
        iArr[12][39] = 16;
        iArr[12][40] = 17;
        iArr[12][41] = 17;
        iArr[12][42] = 17;
        iArr[12][43] = 17;
        iArr[12][44] = 18;
        iArr[12][45] = 18;
        iArr[12][46] = 19;
        iArr[12][47] = 19;
        iArr[12][48] = 20;
        iArr[12][49] = 20;
        iArr[12][50] = 20;
        iArr[12][51] = 20;
        iArr[12][52] = 22;
        iArr[12][53] = 22;
        iArr[12][54] = 22;
        iArr[12][55] = 22;
        iArr[12][56] = 22;
        iArr[12][57] = 23;
        iArr[12][58] = 23;
        iArr[12][59] = 23;
        iArr[12][60] = 23;
        iArr[12][61] = 24;
        iArr[12][62] = 24;
        iArr[12][63] = 25;
        iArr[12][64] = 25;
        iArr[12][65] = 27;
        iArr[12][66] = 27;
        iArr[12][67] = 29;
        iArr[12][68] = 29;
        iArr[12][69] = 29;
        iArr[12][70] = 30;
        iArr[12][71] = 31;
        iArr[12][72] = 31;
        iArr[12][73] = 32;
        iArr[12][74] = 32;
        iArr[12][75] = 32;
        iArr[12][76] = 32;
        iArr[12][77] = 33;
        iArr[12][78] = 34;
        iArr[12][79] = 34;
        iArr[12][80] = 34;
        iArr[12][81] = 34;
        iArr[12][82] = 34;
        iArr[12][83] = 35;
        iArr[12][84] = 35;
        iArr[12][85] = 36;
        iArr[12][86] = 36;
        iArr[12][87] = 36;
        iArr[12][88] = 36;
        iArr[12][89] = 37;
        iArr[12][90] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[12].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[12][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase34() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[13] = new int[109];
        iArr[13][1] = 0;
        iArr[13][2] = 1;
        iArr[13][3] = 1;
        iArr[13][4] = 1;
        iArr[13][5] = 2;
        iArr[13][6] = 3;
        iArr[13][7] = 3;
        iArr[13][8] = 3;
        iArr[13][9] = 3;
        iArr[13][10] = 4;
        iArr[13][11] = 4;
        iArr[13][12] = 4;
        iArr[13][13] = 4;
        iArr[13][14] = 4;
        iArr[13][15] = 5;
        iArr[13][16] = 5;
        iArr[13][17] = 5;
        iArr[13][18] = 5;
        iArr[13][19] = 6;
        iArr[13][20] = 7;
        iArr[13][21] = 7;
        iArr[13][22] = 7;
        iArr[13][23] = 8;
        iArr[13][24] = 9;
        iArr[13][25] = 10;
        iArr[13][26] = 10;
        iArr[13][27] = 10;
        iArr[13][28] = 11;
        iArr[13][29] = 11;
        iArr[13][30] = 12;
        iArr[13][31] = 13;
        iArr[13][32] = 13;
        iArr[13][33] = 13;
        iArr[13][34] = 14;
        iArr[13][35] = 14;
        iArr[13][36] = 14;
        iArr[13][37] = 14;
        iArr[13][38] = 14;
        iArr[13][39] = 15;
        iArr[13][40] = 15;
        iArr[13][41] = 15;
        iArr[13][42] = 16;
        iArr[13][43] = 16;
        iArr[13][44] = 16;
        iArr[13][45] = 16;
        iArr[13][46] = 16;
        iArr[13][47] = 17;
        iArr[13][48] = 17;
        iArr[13][49] = 17;
        iArr[13][50] = 17;
        iArr[13][51] = 18;
        iArr[13][52] = 18;
        iArr[13][53] = 18;
        iArr[13][54] = 19;
        iArr[13][55] = 19;
        iArr[13][56] = 20;
        iArr[13][57] = 20;
        iArr[13][58] = 20;
        iArr[13][59] = 20;
        iArr[13][60] = 21;
        iArr[13][61] = 21;
        iArr[13][62] = 22;
        iArr[13][63] = 22;
        iArr[13][64] = 22;
        iArr[13][65] = 22;
        iArr[13][66] = 22;
        iArr[13][67] = 23;
        iArr[13][68] = 23;
        iArr[13][69] = 23;
        iArr[13][70] = 23;
        iArr[13][71] = 24;
        iArr[13][72] = 24;
        iArr[13][73] = 24;
        iArr[13][74] = 24;
        iArr[13][75] = 25;
        iArr[13][76] = 25;
        iArr[13][77] = 26;
        iArr[13][78] = 27;
        iArr[13][79] = 27;
        iArr[13][80] = 29;
        iArr[13][81] = 29;
        iArr[13][82] = 29;
        iArr[13][83] = 30;
        iArr[13][84] = 30;
        iArr[13][85] = 31;
        iArr[13][86] = 31;
        iArr[13][87] = 32;
        iArr[13][88] = 32;
        iArr[13][89] = 32;
        iArr[13][90] = 32;
        iArr[13][91] = 33;
        iArr[13][92] = 33;
        iArr[13][93] = 33;
        iArr[13][94] = 34;
        iArr[13][95] = 34;
        iArr[13][96] = 34;
        iArr[13][97] = 34;
        iArr[13][98] = 34;
        iArr[13][99] = 35;
        iArr[13][100] = 35;
        iArr[13][101] = 36;
        iArr[13][102] = 36;
        iArr[13][103] = 36;
        iArr[13][104] = 36;
        iArr[13][105] = 36;
        iArr[13][106] = 36;
        iArr[13][107] = 37;
        iArr[13][108] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[13].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[13][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase15() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[14] = new int[96];
        iArr[14][1] = 1;
        iArr[14][2] = 1;
        iArr[14][3] = 1;
        iArr[14][4] = 3;
        iArr[14][5] = 3;
        iArr[14][6] = 3;
        iArr[14][7] = 3;
        iArr[14][8] = 4;
        iArr[14][9] = 4;
        iArr[14][10] = 4;
        iArr[14][11] = 4;
        iArr[14][12] = 4;
        iArr[14][13] = 5;
        iArr[14][14] = 5;
        iArr[14][15] = 5;
        iArr[14][16] = 6;
        iArr[14][17] = 6;
        iArr[14][18] = 7;
        iArr[14][19] = 8;
        iArr[14][20] = 9;
        iArr[14][21] = 10;
        iArr[14][22] = 10;
        iArr[14][23] = 10;
        iArr[14][24] = 11;
        iArr[14][25] = 11;
        iArr[14][26] = 12;
        iArr[14][27] = 13;
        iArr[14][28] = 13;
        iArr[14][29] = 13;
        iArr[14][30] = 14;
        iArr[14][31] = 14;
        iArr[14][32] = 14;
        iArr[14][33] = 15;
        iArr[14][34] = 15;
        iArr[14][35] = 15;
        iArr[14][36] = 16;
        iArr[14][37] = 16;
        iArr[14][38] = 16;
        iArr[14][39] = 16;
        iArr[14][40] = 16;
        iArr[14][41] = 17;
        iArr[14][42] = 17;
        iArr[14][43] = 17;
        iArr[14][44] = 18;
        iArr[14][45] = 18;
        iArr[14][46] = 19;
        iArr[14][47] = 20;
        iArr[14][48] = 20;
        iArr[14][49] = 21;
        iArr[14][50] = 21;
        iArr[14][51] = 21;
        iArr[14][52] = 21;
        iArr[14][53] = 22;
        iArr[14][54] = 22;
        iArr[14][55] = 22;
        iArr[14][56] = 23;
        iArr[14][57] = 23;
        iArr[14][58] = 23;
        iArr[14][59] = 23;
        iArr[14][60] = 24;
        iArr[14][61] = 24;
        iArr[14][62] = 24;
        iArr[14][63] = 24;
        iArr[14][64] = 25;
        iArr[14][65] = 25;
        iArr[14][66] = 26;
        iArr[14][67] = 26;
        iArr[14][68] = 27;
        iArr[14][69] = 27;
        iArr[14][70] = 29;
        iArr[14][71] = 29;
        iArr[14][72] = 29;
        iArr[14][73] = 30;
        iArr[14][74] = 30;
        iArr[14][75] = 31;
        iArr[14][76] = 32;
        iArr[14][77] = 32;
        iArr[14][78] = 33;
        iArr[14][79] = 33;
        iArr[14][80] = 33;
        iArr[14][81] = 33;
        iArr[14][82] = 33;
        iArr[14][83] = 34;
        iArr[14][84] = 34;
        iArr[14][85] = 34;
        iArr[14][86] = 35;
        iArr[14][87] = 35;
        iArr[14][88] = 35;
        iArr[14][89] = 36;
        iArr[14][90] = 36;
        iArr[14][91] = 36;
        iArr[14][92] = 36;
        iArr[14][93] = 36;
        iArr[14][94] = 37;
        iArr[14][95] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[14].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[14][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase3() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[15] = new int[96];
        iArr[15][1] = 1;
        iArr[15][2] = 1;
        iArr[15][3] = 3;
        iArr[15][4] = 3;
        iArr[15][5] = 3;
        iArr[15][6] = 3;
        iArr[15][7] = 3;
        iArr[15][8] = 4;
        iArr[15][9] = 4;
        iArr[15][10] = 4;
        iArr[15][11] = 4;
        iArr[15][12] = 4;
        iArr[15][13] = 5;
        iArr[15][14] = 5;
        iArr[15][15] = 6;
        iArr[15][16] = 6;
        iArr[15][17] = 6;
        iArr[15][18] = 8;
        iArr[15][19] = 9;
        iArr[15][20] = 9;
        iArr[15][21] = 10;
        iArr[15][22] = 11;
        iArr[15][23] = 12;
        iArr[15][24] = 13;
        iArr[15][25] = 13;
        iArr[15][26] = 13;
        iArr[15][27] = 13;
        iArr[15][28] = 14;
        iArr[15][29] = 14;
        iArr[15][30] = 14;
        iArr[15][31] = 15;
        iArr[15][32] = 15;
        iArr[15][33] = 15;
        iArr[15][34] = 15;
        iArr[15][35] = 16;
        iArr[15][36] = 16;
        iArr[15][37] = 16;
        iArr[15][38] = 16;
        iArr[15][39] = 16;
        iArr[15][40] = 16;
        iArr[15][41] = 17;
        iArr[15][42] = 17;
        iArr[15][43] = 18;
        iArr[15][44] = 18;
        iArr[15][45] = 18;
        iArr[15][46] = 19;
        iArr[15][47] = 20;
        iArr[15][48] = 21;
        iArr[15][49] = 21;
        iArr[15][50] = 21;
        iArr[15][51] = 21;
        iArr[15][52] = 21;
        iArr[15][53] = 21;
        iArr[15][54] = 22;
        iArr[15][55] = 22;
        iArr[15][56] = 22;
        iArr[15][57] = 23;
        iArr[15][58] = 23;
        iArr[15][59] = 23;
        iArr[15][60] = 23;
        iArr[15][61] = 24;
        iArr[15][62] = 24;
        iArr[15][63] = 24;
        iArr[15][64] = 24;
        iArr[15][65] = 24;
        iArr[15][66] = 25;
        iArr[15][67] = 26;
        iArr[15][68] = 26;
        iArr[15][69] = 26;
        iArr[15][70] = 29;
        iArr[15][71] = 29;
        iArr[15][72] = 30;
        iArr[15][73] = 30;
        iArr[15][74] = 30;
        iArr[15][75] = 31;
        iArr[15][76] = 32;
        iArr[15][77] = 33;
        iArr[15][78] = 33;
        iArr[15][79] = 33;
        iArr[15][80] = 33;
        iArr[15][81] = 33;
        iArr[15][82] = 33;
        iArr[15][83] = 34;
        iArr[15][84] = 34;
        iArr[15][85] = 34;
        iArr[15][86] = 34;
        iArr[15][87] = 35;
        iArr[15][88] = 35;
        iArr[15][89] = 35;
        iArr[15][90] = 36;
        iArr[15][91] = 36;
        iArr[15][92] = 36;
        iArr[15][93] = 36;
        iArr[15][94] = 36;
        iArr[15][95] = 36;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[15].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[15][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase24() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[16] = new int[95];
        iArr[16][1] = 1;
        iArr[16][2] = 1;
        iArr[16][3] = 3;
        iArr[16][4] = 3;
        iArr[16][5] = 3;
        iArr[16][6] = 3;
        iArr[16][7] = 3;
        iArr[16][8] = 4;
        iArr[16][9] = 4;
        iArr[16][10] = 4;
        iArr[16][11] = 4;
        iArr[16][12] = 5;
        iArr[16][13] = 6;
        iArr[16][14] = 6;
        iArr[16][15] = 6;
        iArr[16][16] = 6;
        iArr[16][17] = 8;
        iArr[16][18] = 8;
        iArr[16][19] = 9;
        iArr[16][20] = 9;
        iArr[16][21] = 9;
        iArr[16][22] = 10;
        iArr[16][23] = 11;
        iArr[16][24] = 12;
        iArr[16][25] = 12;
        iArr[16][26] = 13;
        iArr[16][27] = 13;
        iArr[16][28] = 13;
        iArr[16][29] = 13;
        iArr[16][30] = 14;
        iArr[16][31] = 15;
        iArr[16][32] = 15;
        iArr[16][33] = 15;
        iArr[16][34] = 15;
        iArr[16][35] = 16;
        iArr[16][36] = 16;
        iArr[16][37] = 16;
        iArr[16][38] = 16;
        iArr[16][39] = 16;
        iArr[16][40] = 16;
        iArr[16][41] = 18;
        iArr[16][42] = 18;
        iArr[16][43] = 18;
        iArr[16][44] = 18;
        iArr[16][45] = 19;
        iArr[16][46] = 19;
        iArr[16][47] = 21;
        iArr[16][48] = 21;
        iArr[16][49] = 21;
        iArr[16][50] = 21;
        iArr[16][51] = 21;
        iArr[16][52] = 21;
        iArr[16][53] = 22;
        iArr[16][54] = 22;
        iArr[16][55] = 23;
        iArr[16][56] = 23;
        iArr[16][57] = 24;
        iArr[16][58] = 24;
        iArr[16][59] = 24;
        iArr[16][60] = 24;
        iArr[16][61] = 24;
        iArr[16][62] = 25;
        iArr[16][63] = 26;
        iArr[16][64] = 26;
        iArr[16][65] = 26;
        iArr[16][66] = 26;
        iArr[16][67] = 27;
        iArr[16][68] = 28;
        iArr[16][69] = 29;
        iArr[16][70] = 29;
        iArr[16][71] = 30;
        iArr[16][72] = 30;
        iArr[16][73] = 30;
        iArr[16][74] = 31;
        iArr[16][75] = 31;
        iArr[16][76] = 31;
        iArr[16][77] = 33;
        iArr[16][78] = 33;
        iArr[16][79] = 33;
        iArr[16][80] = 33;
        iArr[16][81] = 33;
        iArr[16][82] = 33;
        iArr[16][83] = 34;
        iArr[16][84] = 34;
        iArr[16][85] = 34;
        iArr[16][86] = 34;
        iArr[16][87] = 35;
        iArr[16][88] = 36;
        iArr[16][89] = 36;
        iArr[16][90] = 36;
        iArr[16][91] = 36;
        iArr[16][92] = 36;
        iArr[16][93] = 36;
        iArr[16][94] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[16].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[16][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase36() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[17] = new int[117];
        iArr[17][1] = 1;
        iArr[17][2] = 1;
        iArr[17][3] = 3;
        iArr[17][4] = 3;
        iArr[17][5] = 3;
        iArr[17][6] = 3;
        iArr[17][7] = 3;
        iArr[17][8] = 3;
        iArr[17][9] = 4;
        iArr[17][10] = 4;
        iArr[17][11] = 4;
        iArr[17][12] = 4;
        iArr[17][13] = 4;
        iArr[17][14] = 5;
        iArr[17][15] = 5;
        iArr[17][16] = 6;
        iArr[17][17] = 6;
        iArr[17][18] = 6;
        iArr[17][19] = 6;
        iArr[17][20] = 8;
        iArr[17][21] = 8;
        iArr[17][22] = 9;
        iArr[17][23] = 9;
        iArr[17][24] = 9;
        iArr[17][25] = 10;
        iArr[17][26] = 11;
        iArr[17][27] = 12;
        iArr[17][28] = 12;
        iArr[17][29] = 13;
        iArr[17][30] = 13;
        iArr[17][31] = 13;
        iArr[17][32] = 13;
        iArr[17][33] = 14;
        iArr[17][34] = 14;
        iArr[17][35] = 15;
        iArr[17][36] = 15;
        iArr[17][37] = 15;
        iArr[17][38] = 15;
        iArr[17][39] = 15;
        iArr[17][40] = 16;
        iArr[17][41] = 16;
        iArr[17][42] = 16;
        iArr[17][43] = 16;
        iArr[17][44] = 16;
        iArr[17][45] = 16;
        iArr[17][46] = 16;
        iArr[17][47] = 18;
        iArr[17][48] = 18;
        iArr[17][49] = 18;
        iArr[17][50] = 18;
        iArr[17][51] = 18;
        iArr[17][52] = 19;
        iArr[17][53] = 19;
        iArr[17][54] = 19;
        iArr[17][55] = 21;
        iArr[17][56] = 21;
        iArr[17][57] = 21;
        iArr[17][58] = 21;
        iArr[17][59] = 21;
        iArr[17][60] = 21;
        iArr[17][61] = 22;
        iArr[17][62] = 22;
        iArr[17][63] = 22;
        iArr[17][64] = 22;
        iArr[17][65] = 23;
        iArr[17][66] = 23;
        iArr[17][67] = 23;
        iArr[17][68] = 24;
        iArr[17][69] = 24;
        iArr[17][70] = 24;
        iArr[17][71] = 24;
        iArr[17][72] = 24;
        iArr[17][73] = 24;
        iArr[17][74] = 25;
        iArr[17][75] = 26;
        iArr[17][76] = 26;
        iArr[17][77] = 26;
        iArr[17][78] = 26;
        iArr[17][79] = 27;
        iArr[17][80] = 28;
        iArr[17][81] = 29;
        iArr[17][82] = 29;
        iArr[17][83] = 30;
        iArr[17][84] = 30;
        iArr[17][85] = 30;
        iArr[17][86] = 31;
        iArr[17][87] = 31;
        iArr[17][88] = 31;
        iArr[17][89] = 31;
        iArr[17][90] = 33;
        iArr[17][91] = 33;
        iArr[17][92] = 33;
        iArr[17][93] = 33;
        iArr[17][94] = 33;
        iArr[17][95] = 33;
        iArr[17][96] = 34;
        iArr[17][97] = 34;
        iArr[17][98] = 34;
        iArr[17][99] = 34;
        iArr[17][100] = 34;
        iArr[17][101] = 34;
        iArr[17][102] = 35;
        iArr[17][103] = 36;
        iArr[17][104] = 36;
        iArr[17][105] = 36;
        iArr[17][106] = 36;
        iArr[17][107] = 36;
        iArr[17][108] = 36;
        iArr[17][109] = 36;
        iArr[17][110] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[17].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[17][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase13() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[18] = new int[89];
        iArr[18][1] = 1;
        iArr[18][2] = 1;
        iArr[18][3] = 3;
        iArr[18][4] = 3;
        iArr[18][5] = 3;
        iArr[18][6] = 3;
        iArr[18][7] = 4;
        iArr[18][8] = 4;
        iArr[18][9] = 4;
        iArr[18][10] = 5;
        iArr[18][11] = 6;
        iArr[18][12] = 6;
        iArr[18][13] = 6;
        iArr[18][14] = 6;
        iArr[18][15] = 7;
        iArr[18][16] = 8;
        iArr[18][17] = 8;
        iArr[18][18] = 9;
        iArr[18][19] = 9;
        iArr[18][20] = 10;
        iArr[18][21] = 10;
        iArr[18][22] = 11;
        iArr[18][23] = 11;
        iArr[18][24] = 12;
        iArr[18][25] = 12;
        iArr[18][26] = 13;
        iArr[18][27] = 13;
        iArr[18][28] = 13;
        iArr[18][29] = 14;
        iArr[18][30] = 15;
        iArr[18][31] = 15;
        iArr[18][32] = 15;
        iArr[18][33] = 16;
        iArr[18][34] = 16;
        iArr[18][35] = 16;
        iArr[18][36] = 16;
        iArr[18][37] = 18;
        iArr[18][38] = 18;
        iArr[18][39] = 18;
        iArr[18][40] = 18;
        iArr[18][41] = 19;
        iArr[18][42] = 19;
        iArr[18][43] = 19;
        iArr[18][44] = 21;
        iArr[18][45] = 21;
        iArr[18][46] = 21;
        iArr[18][47] = 21;
        iArr[18][48] = 21;
        iArr[18][49] = 22;
        iArr[18][50] = 22;
        iArr[18][51] = 23;
        iArr[18][52] = 23;
        iArr[18][53] = 24;
        iArr[18][54] = 24;
        iArr[18][55] = 24;
        iArr[18][56] = 24;
        iArr[18][57] = 25;
        iArr[18][58] = 25;
        iArr[18][59] = 26;
        iArr[18][60] = 26;
        iArr[18][61] = 26;
        iArr[18][62] = 27;
        iArr[18][63] = 27;
        iArr[18][64] = 28;
        iArr[18][65] = 29;
        iArr[18][66] = 29;
        iArr[18][67] = 30;
        iArr[18][68] = 30;
        iArr[18][69] = 30;
        iArr[18][70] = 31;
        iArr[18][71] = 31;
        iArr[18][72] = 31;
        iArr[18][73] = 31;
        iArr[18][74] = 33;
        iArr[18][75] = 33;
        iArr[18][76] = 33;
        iArr[18][77] = 33;
        iArr[18][78] = 33;
        iArr[18][79] = 34;
        iArr[18][80] = 34;
        iArr[18][81] = 34;
        iArr[18][82] = 35;
        iArr[18][83] = 36;
        iArr[18][84] = 36;
        iArr[18][85] = 36;
        iArr[18][86] = 36;
        iArr[18][87] = 37;
        iArr[18][88] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[18].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[18][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase1() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[19] = new int[92];
        iArr[19][1] = 0;
        iArr[19][2] = 0;
        iArr[19][3] = 1;
        iArr[19][4] = 1;
        iArr[19][5] = 1;
        iArr[19][6] = 2;
        iArr[19][7] = 3;
        iArr[19][8] = 3;
        iArr[19][9] = 4;
        iArr[19][10] = 4;
        iArr[19][11] = 4;
        iArr[19][12] = 5;
        iArr[19][13] = 5;
        iArr[19][14] = 6;
        iArr[19][15] = 6;
        iArr[19][16] = 7;
        iArr[19][17] = 7;
        iArr[19][18] = 7;
        iArr[19][19] = 8;
        iArr[19][20] = 8;
        iArr[19][21] = 9;
        iArr[19][22] = 10;
        iArr[19][23] = 10;
        iArr[19][24] = 10;
        iArr[19][25] = 10;
        iArr[19][26] = 11;
        iArr[19][27] = 11;
        iArr[19][28] = 11;
        iArr[19][29] = 11;
        iArr[19][30] = 12;
        iArr[19][31] = 13;
        iArr[19][32] = 13;
        iArr[19][33] = 14;
        iArr[19][34] = 15;
        iArr[19][35] = 15;
        iArr[19][36] = 15;
        iArr[19][37] = 16;
        iArr[19][38] = 16;
        iArr[19][39] = 16;
        iArr[19][40] = 17;
        iArr[19][41] = 18;
        iArr[19][42] = 18;
        iArr[19][43] = 19;
        iArr[19][44] = 19;
        iArr[19][45] = 19;
        iArr[19][46] = 20;
        iArr[19][47] = 20;
        iArr[19][48] = 21;
        iArr[19][49] = 21;
        iArr[19][50] = 21;
        iArr[19][51] = 22;
        iArr[19][52] = 22;
        iArr[19][53] = 22;
        iArr[19][54] = 23;
        iArr[19][55] = 23;
        iArr[19][56] = 24;
        iArr[19][57] = 24;
        iArr[19][58] = 25;
        iArr[19][59] = 25;
        iArr[19][60] = 25;
        iArr[19][61] = 26;
        iArr[19][62] = 26;
        iArr[19][63] = 27;
        iArr[19][64] = 27;
        iArr[19][65] = 27;
        iArr[19][66] = 27;
        iArr[19][67] = 28;
        iArr[19][68] = 28;
        iArr[19][69] = 29;
        iArr[19][70] = 29;
        iArr[19][71] = 30;
        iArr[19][72] = 30;
        iArr[19][73] = 30;
        iArr[19][74] = 31;
        iArr[19][75] = 31;
        iArr[19][76] = 31;
        iArr[19][77] = 32;
        iArr[19][78] = 32;
        iArr[19][79] = 33;
        iArr[19][80] = 33;
        iArr[19][81] = 33;
        iArr[19][82] = 33;
        iArr[19][83] = 34;
        iArr[19][84] = 34;
        iArr[19][85] = 34;
        iArr[19][86] = 35;
        iArr[19][87] = 36;
        iArr[19][88] = 36;
        iArr[19][89] = 37;
        iArr[19][90] = 37;
        iArr[19][91] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[19].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[19][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase00() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[20] = new int[67];
        iArr[20][1] = 1;
        iArr[20][2] = 1;
        iArr[20][3] = 1;
        iArr[20][4] = 4;
        iArr[20][5] = 5;
        iArr[20][6] = 5;
        iArr[20][7] = 6;
        iArr[20][8] = 6;
        iArr[20][9] = 7;
        iArr[20][10] = 7;
        iArr[20][11] = 7;
        iArr[20][12] = 8;
        iArr[20][13] = 8;
        iArr[20][14] = 9;
        iArr[20][15] = 10;
        iArr[20][16] = 10;
        iArr[20][17] = 10;
        iArr[20][18] = 11;
        iArr[20][19] = 11;
        iArr[20][20] = 11;
        iArr[20][21] = 12;
        iArr[20][22] = 12;
        iArr[20][23] = 13;
        iArr[20][24] = 13;
        iArr[20][25] = 15;
        iArr[20][26] = 16;
        iArr[20][27] = 16;
        iArr[20][28] = 17;
        iArr[20][29] = 18;
        iArr[20][30] = 18;
        iArr[20][31] = 19;
        iArr[20][32] = 19;
        iArr[20][33] = 19;
        iArr[20][34] = 20;
        iArr[20][35] = 21;
        iArr[20][36] = 21;
        iArr[20][37] = 22;
        iArr[20][38] = 22;
        iArr[20][39] = 24;
        iArr[20][40] = 25;
        iArr[20][41] = 25;
        iArr[20][42] = 25;
        iArr[20][43] = 26;
        iArr[20][44] = 27;
        iArr[20][45] = 27;
        iArr[20][46] = 27;
        iArr[20][47] = 27;
        iArr[20][48] = 28;
        iArr[20][49] = 29;
        iArr[20][50] = 29;
        iArr[20][51] = 30;
        iArr[20][52] = 30;
        iArr[20][53] = 31;
        iArr[20][54] = 31;
        iArr[20][55] = 31;
        iArr[20][56] = 32;
        iArr[20][57] = 33;
        iArr[20][58] = 33;
        iArr[20][59] = 33;
        iArr[20][60] = 34;
        iArr[20][61] = 34;
        iArr[20][62] = 36;
        iArr[20][63] = 37;
        iArr[20][64] = 37;
        iArr[20][65] = 37;
        iArr[20][66] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[20].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[20][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase27() {
        this.auxListDB.clear();
        posiblesJugadas = (int[][]) Array.newInstance(int.class, new int[]{38, 100});
        int[][] iArr = posiblesJugadas;
        iArr[21][1] = 0;
        iArr[21][2] = 0;
        iArr[21][3] = 0;
        iArr[21][4] = 1;
        iArr[21][5] = 1;
        iArr[21][6] = 1;
        iArr[21][7] = 2;
        iArr[21][8] = 2;
        iArr[21][9] = 4;
        iArr[21][10] = 4;
        iArr[21][11] = 5;
        iArr[21][12] = 5;
        iArr[21][13] = 6;
        iArr[21][14] = 6;
        iArr[21][15] = 7;
        iArr[21][16] = 7;
        iArr[21][17] = 7;
        iArr[21][18] = 7;
        iArr[21][19] = 7;
        iArr[21][20] = 8;
        iArr[21][21] = 8;
        iArr[21][22] = 9;
        iArr[21][23] = 9;
        iArr[21][24] = 10;
        iArr[21][25] = 10;
        iArr[21][26] = 10;
        iArr[21][27] = 10;
        iArr[21][28] = 10;
        iArr[21][29] = 10;
        iArr[21][30] = 11;
        iArr[21][31] = 11;
        iArr[21][32] = 11;
        iArr[21][33] = 11;
        iArr[21][34] = 11;
        iArr[21][35] = 12;
        iArr[21][36] = 13;
        iArr[21][37] = 13;
        iArr[21][38] = 15;
        iArr[21][39] = 15;
        iArr[21][40] = 16;
        iArr[21][41] = 16;
        iArr[21][42] = 17;
        iArr[21][43] = 17;
        iArr[21][44] = 18;
        iArr[21][45] = 18;
        iArr[21][46] = 19;
        iArr[21][47] = 19;
        iArr[21][48] = 19;
        iArr[21][49] = 20;
        iArr[21][50] = 20;
        iArr[21][51] = 20;
        iArr[21][52] = 20;
        iArr[21][53] = 21;
        iArr[21][54] = 22;
        iArr[21][55] = 22;
        iArr[21][56] = 24;
        iArr[21][57] = 25;
        iArr[21][58] = 25;
        iArr[21][59] = 25;
        iArr[21][60] = 25;
        iArr[21][61] = 25;
        iArr[21][62] = 26;
        iArr[21][63] = 26;
        iArr[21][64] = 26;
        iArr[21][65] = 27;
        iArr[21][66] = 27;
        iArr[21][67] = 27;
        iArr[21][68] = 27;
        iArr[21][69] = 27;
        iArr[21][70] = 27;
        iArr[21][71] = 28;
        iArr[21][72] = 28;
        iArr[21][73] = 28;
        iArr[21][74] = 28;
        iArr[21][75] = 29;
        iArr[21][76] = 29;
        iArr[21][77] = 29;
        iArr[21][78] = 30;
        iArr[21][79] = 30;
        iArr[21][80] = 30;
        iArr[21][81] = 31;
        iArr[21][82] = 31;
        iArr[21][83] = 31;
        iArr[21][84] = 31;
        iArr[21][85] = 32;
        iArr[21][86] = 32;
        iArr[21][87] = 32;
        iArr[21][88] = 32;
        iArr[21][89] = 33;
        iArr[21][90] = 33;
        iArr[21][91] = 33;
        iArr[21][92] = 34;
        iArr[21][93] = 34;
        iArr[21][94] = 36;
        iArr[21][95] = 37;
        iArr[21][96] = 37;
        iArr[21][97] = 37;
        iArr[21][98] = 37;
        iArr[21][99] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[21].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[21][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase10() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[22] = new int[98];
        iArr[22][1] = 0;
        iArr[22][2] = 1;
        iArr[22][3] = 1;
        iArr[22][4] = 1;
        iArr[22][5] = 2;
        iArr[22][6] = 3;
        iArr[22][7] = 4;
        iArr[22][8] = 4;
        iArr[22][9] = 4;
        iArr[22][10] = 5;
        iArr[22][11] = 5;
        iArr[22][12] = 5;
        iArr[22][13] = 6;
        iArr[22][14] = 6;
        iArr[22][15] = 7;
        iArr[22][16] = 7;
        iArr[22][17] = 7;
        iArr[22][18] = 7;
        iArr[22][19] = 8;
        iArr[22][20] = 9;
        iArr[22][21] = 10;
        iArr[22][22] = 10;
        iArr[22][23] = 10;
        iArr[22][24] = 10;
        iArr[22][25] = 10;
        iArr[22][26] = 11;
        iArr[22][27] = 11;
        iArr[22][28] = 11;
        iArr[22][29] = 11;
        iArr[22][30] = 12;
        iArr[22][31] = 13;
        iArr[22][32] = 13;
        iArr[22][33] = 14;
        iArr[22][34] = 14;
        iArr[22][35] = 15;
        iArr[22][36] = 15;
        iArr[22][37] = 15;
        iArr[22][38] = 16;
        iArr[22][39] = 16;
        iArr[22][40] = 17;
        iArr[22][41] = 17;
        iArr[22][42] = 17;
        iArr[22][43] = 17;
        iArr[22][44] = 18;
        iArr[22][45] = 18;
        iArr[22][46] = 19;
        iArr[22][47] = 19;
        iArr[22][48] = 20;
        iArr[22][49] = 20;
        iArr[22][50] = 20;
        iArr[22][51] = 20;
        iArr[22][52] = 21;
        iArr[22][53] = 22;
        iArr[22][54] = 22;
        iArr[22][55] = 22;
        iArr[22][56] = 23;
        iArr[22][57] = 23;
        iArr[22][58] = 24;
        iArr[22][59] = 25;
        iArr[22][60] = 25;
        iArr[22][61] = 25;
        iArr[22][62] = 25;
        iArr[22][63] = 26;
        iArr[22][64] = 26;
        iArr[22][65] = 27;
        iArr[22][66] = 27;
        iArr[22][67] = 27;
        iArr[22][68] = 27;
        iArr[22][69] = 27;
        iArr[22][70] = 28;
        iArr[22][71] = 28;
        iArr[22][72] = 29;
        iArr[22][73] = 29;
        iArr[22][74] = 29;
        iArr[22][75] = 30;
        iArr[22][76] = 30;
        iArr[22][77] = 31;
        iArr[22][78] = 31;
        iArr[22][79] = 31;
        iArr[22][80] = 32;
        iArr[22][81] = 32;
        iArr[22][82] = 32;
        iArr[22][83] = 32;
        iArr[22][84] = 33;
        iArr[22][85] = 33;
        iArr[22][86] = 33;
        iArr[22][87] = 34;
        iArr[22][88] = 34;
        iArr[22][89] = 34;
        iArr[22][90] = 35;
        iArr[22][91] = 35;
        iArr[22][92] = 36;
        iArr[22][93] = 37;
        iArr[22][94] = 37;
        iArr[22][95] = 37;
        iArr[22][96] = 37;
        iArr[22][97] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[22].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[22][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase25() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[23] = new int[92];
        iArr[23][1] = 0;
        iArr[23][2] = 1;
        iArr[23][3] = 1;
        iArr[23][4] = 1;
        iArr[23][5] = 2;
        iArr[23][6] = 3;
        iArr[23][7] = 4;
        iArr[23][8] = 4;
        iArr[23][9] = 5;
        iArr[23][10] = 5;
        iArr[23][11] = 6;
        iArr[23][12] = 6;
        iArr[23][13] = 6;
        iArr[23][14] = 7;
        iArr[23][15] = 7;
        iArr[23][16] = 7;
        iArr[23][17] = 7;
        iArr[23][18] = 8;
        iArr[23][19] = 9;
        iArr[23][20] = 10;
        iArr[23][21] = 10;
        iArr[23][22] = 10;
        iArr[23][23] = 10;
        iArr[23][24] = 11;
        iArr[23][25] = 11;
        iArr[23][26] = 11;
        iArr[23][27] = 11;
        iArr[23][28] = 12;
        iArr[23][29] = 13;
        iArr[23][30] = 13;
        iArr[23][31] = 13;
        iArr[23][32] = 14;
        iArr[23][33] = 14;
        iArr[23][34] = 15;
        iArr[23][35] = 15;
        iArr[23][36] = 16;
        iArr[23][37] = 17;
        iArr[23][38] = 17;
        iArr[23][39] = 17;
        iArr[23][40] = 18;
        iArr[23][41] = 18;
        iArr[23][42] = 18;
        iArr[23][43] = 19;
        iArr[23][44] = 19;
        iArr[23][45] = 19;
        iArr[23][46] = 20;
        iArr[23][47] = 20;
        iArr[23][48] = 20;
        iArr[23][49] = 21;
        iArr[23][50] = 21;
        iArr[23][51] = 22;
        iArr[23][52] = 22;
        iArr[23][53] = 23;
        iArr[23][54] = 23;
        iArr[23][55] = 24;
        iArr[23][56] = 25;
        iArr[23][57] = 25;
        iArr[23][58] = 25;
        iArr[23][59] = 26;
        iArr[23][60] = 26;
        iArr[23][61] = 27;
        iArr[23][62] = 27;
        iArr[23][63] = 27;
        iArr[23][64] = 27;
        iArr[23][65] = 28;
        iArr[23][66] = 28;
        iArr[23][67] = 29;
        iArr[23][68] = 29;
        iArr[23][69] = 30;
        iArr[23][70] = 30;
        iArr[23][71] = 30;
        iArr[23][72] = 31;
        iArr[23][73] = 31;
        iArr[23][74] = 31;
        iArr[23][75] = 31;
        iArr[23][76] = 32;
        iArr[23][77] = 32;
        iArr[23][78] = 32;
        iArr[23][79] = 33;
        iArr[23][80] = 33;
        iArr[23][81] = 33;
        iArr[23][82] = 34;
        iArr[23][83] = 34;
        iArr[23][84] = 35;
        iArr[23][85] = 35;
        iArr[23][86] = 36;
        iArr[23][87] = 37;
        iArr[23][88] = 37;
        iArr[23][89] = 37;
        iArr[23][90] = 37;
        iArr[23][91] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[23].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[23][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase29() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[24] = new int[104];
        iArr[24][1] = 0;
        iArr[24][2] = 1;
        iArr[24][3] = 1;
        iArr[24][4] = 1;
        iArr[24][5] = 2;
        iArr[24][6] = 3;
        iArr[24][7] = 3;
        iArr[24][8] = 4;
        iArr[24][9] = 4;
        iArr[24][10] = 4;
        iArr[24][11] = 5;
        iArr[24][12] = 5;
        iArr[24][13] = 5;
        iArr[24][14] = 6;
        iArr[24][15] = 6;
        iArr[24][16] = 6;
        iArr[24][17] = 7;
        iArr[24][18] = 7;
        iArr[24][19] = 7;
        iArr[24][20] = 7;
        iArr[24][21] = 8;
        iArr[24][22] = 8;
        iArr[24][23] = 9;
        iArr[24][24] = 10;
        iArr[24][25] = 10;
        iArr[24][26] = 10;
        iArr[24][27] = 11;
        iArr[24][28] = 11;
        iArr[24][29] = 11;
        iArr[24][30] = 11;
        iArr[24][31] = 12;
        iArr[24][32] = 12;
        iArr[24][33] = 13;
        iArr[24][34] = 13;
        iArr[24][35] = 13;
        iArr[24][36] = 14;
        iArr[24][37] = 14;
        iArr[24][38] = 14;
        iArr[24][39] = 15;
        iArr[24][40] = 15;
        iArr[24][41] = 15;
        iArr[24][42] = 16;
        iArr[24][43] = 16;
        iArr[24][44] = 17;
        iArr[24][45] = 17;
        iArr[24][46] = 17;
        iArr[24][47] = 17;
        iArr[24][48] = 18;
        iArr[24][49] = 18;
        iArr[24][50] = 19;
        iArr[24][51] = 19;
        iArr[24][52] = 20;
        iArr[24][53] = 20;
        iArr[24][54] = 20;
        iArr[24][55] = 20;
        iArr[24][56] = 21;
        iArr[24][57] = 21;
        iArr[24][58] = 21;
        iArr[24][59] = 22;
        iArr[24][60] = 22;
        iArr[24][61] = 22;
        iArr[24][62] = 23;
        iArr[24][63] = 23;
        iArr[24][64] = 23;
        iArr[24][65] = 24;
        iArr[24][66] = 24;
        iArr[24][67] = 25;
        iArr[24][68] = 25;
        iArr[24][69] = 26;
        iArr[24][70] = 26;
        iArr[24][71] = 27;
        iArr[24][72] = 27;
        iArr[24][73] = 27;
        iArr[24][74] = 28;
        iArr[24][75] = 29;
        iArr[24][76] = 29;
        iArr[24][77] = 29;
        iArr[24][78] = 30;
        iArr[24][79] = 30;
        iArr[24][80] = 30;
        iArr[24][81] = 31;
        iArr[24][82] = 31;
        iArr[24][83] = 31;
        iArr[24][84] = 32;
        iArr[24][85] = 32;
        iArr[24][86] = 32;
        iArr[24][87] = 32;
        iArr[24][88] = 33;
        iArr[24][89] = 33;
        iArr[24][90] = 33;
        iArr[24][91] = 33;
        iArr[24][92] = 34;
        iArr[24][93] = 34;
        iArr[24][94] = 34;
        iArr[24][95] = 35;
        iArr[24][96] = 35;
        iArr[24][97] = 35;
        iArr[24][98] = 36;
        iArr[24][99] = 36;
        iArr[24][100] = 37;
        iArr[24][101] = 37;
        iArr[24][102] = 37;
        iArr[24][103] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[24].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[24][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase12() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[25] = new int[85];
        iArr[25][1] = 0;
        iArr[25][2] = 0;
        iArr[25][3] = 1;
        iArr[25][4] = 1;
        iArr[25][5] = 2;
        iArr[25][6] = 3;
        iArr[25][7] = 4;
        iArr[25][8] = 5;
        iArr[25][9] = 5;
        iArr[25][10] = 6;
        iArr[25][11] = 6;
        iArr[25][12] = 6;
        iArr[25][13] = 6;
        iArr[25][14] = 7;
        iArr[25][15] = 7;
        iArr[25][16] = 7;
        iArr[25][17] = 8;
        iArr[25][18] = 8;
        iArr[25][19] = 8;
        iArr[25][20] = 9;
        iArr[25][21] = 9;
        iArr[25][22] = 9;
        iArr[25][23] = 10;
        iArr[25][24] = 11;
        iArr[25][25] = 11;
        iArr[25][26] = 11;
        iArr[25][27] = 12;
        iArr[25][28] = 12;
        iArr[25][29] = 12;
        iArr[25][30] = 13;
        iArr[25][31] = 13;
        iArr[25][32] = 13;
        iArr[25][33] = 14;
        iArr[25][34] = 14;
        iArr[25][35] = 15;
        iArr[25][36] = 16;
        iArr[25][37] = 17;
        iArr[25][38] = 17;
        iArr[25][39] = 18;
        iArr[25][40] = 18;
        iArr[25][41] = 18;
        iArr[25][42] = 19;
        iArr[25][43] = 19;
        iArr[25][44] = 19;
        iArr[25][45] = 20;
        iArr[25][46] = 20;
        iArr[25][47] = 21;
        iArr[25][48] = 21;
        iArr[25][49] = 21;
        iArr[25][50] = 22;
        iArr[25][51] = 23;
        iArr[25][52] = 23;
        iArr[25][53] = 24;
        iArr[25][54] = 24;
        iArr[25][55] = 25;
        iArr[25][56] = 26;
        iArr[25][57] = 26;
        iArr[25][58] = 26;
        iArr[25][59] = 27;
        iArr[25][60] = 28;
        iArr[25][61] = 28;
        iArr[25][62] = 29;
        iArr[25][63] = 29;
        iArr[25][64] = 30;
        iArr[25][65] = 30;
        iArr[25][66] = 30;
        iArr[25][67] = 30;
        iArr[25][68] = 31;
        iArr[25][69] = 31;
        iArr[25][70] = 31;
        iArr[25][71] = 31;
        iArr[25][72] = 32;
        iArr[25][73] = 32;
        iArr[25][74] = 32;
        iArr[25][75] = 33;
        iArr[25][76] = 33;
        iArr[25][77] = 33;
        iArr[25][78] = 34;
        iArr[25][79] = 35;
        iArr[25][80] = 35;
        iArr[25][81] = 36;
        iArr[25][82] = 36;
        iArr[25][83] = 37;
        iArr[25][84] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[25].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[25][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase8() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[26] = new int[88];
        iArr[26][1] = 0;
        iArr[26][2] = 0;
        iArr[26][3] = 0;
        iArr[26][4] = 0;
        iArr[26][5] = 1;
        iArr[26][6] = 2;
        iArr[26][7] = 2;
        iArr[26][8] = 3;
        iArr[26][9] = 4;
        iArr[26][10] = 5;
        iArr[26][11] = 5;
        iArr[26][12] = 6;
        iArr[26][13] = 6;
        iArr[26][14] = 6;
        iArr[26][15] = 7;
        iArr[26][16] = 7;
        iArr[26][17] = 7;
        iArr[26][18] = 8;
        iArr[26][19] = 8;
        iArr[26][20] = 8;
        iArr[26][21] = 9;
        iArr[26][22] = 9;
        iArr[26][23] = 9;
        iArr[26][24] = 9;
        iArr[26][25] = 10;
        iArr[26][26] = 10;
        iArr[26][27] = 11;
        iArr[26][28] = 11;
        iArr[26][29] = 11;
        iArr[26][30] = 12;
        iArr[26][31] = 12;
        iArr[26][32] = 12;
        iArr[26][33] = 13;
        iArr[26][34] = 13;
        iArr[26][35] = 14;
        iArr[26][36] = 14;
        iArr[26][37] = 15;
        iArr[26][38] = 16;
        iArr[26][39] = 17;
        iArr[26][40] = 17;
        iArr[26][41] = 18;
        iArr[26][42] = 18;
        iArr[26][43] = 19;
        iArr[26][44] = 19;
        iArr[26][45] = 20;
        iArr[26][46] = 20;
        iArr[26][47] = 20;
        iArr[26][48] = 21;
        iArr[26][49] = 21;
        iArr[26][50] = 22;
        iArr[26][51] = 23;
        iArr[26][52] = 23;
        iArr[26][53] = 24;
        iArr[26][54] = 24;
        iArr[26][55] = 25;
        iArr[26][56] = 25;
        iArr[26][57] = 26;
        iArr[26][58] = 26;
        iArr[26][59] = 26;
        iArr[26][60] = 26;
        iArr[26][61] = 27;
        iArr[26][62] = 27;
        iArr[26][63] = 28;
        iArr[26][64] = 28;
        iArr[26][65] = 28;
        iArr[26][66] = 28;
        iArr[26][67] = 29;
        iArr[26][68] = 29;
        iArr[26][69] = 30;
        iArr[26][70] = 30;
        iArr[26][71] = 30;
        iArr[26][72] = 30;
        iArr[26][73] = 31;
        iArr[26][74] = 31;
        iArr[26][75] = 31;
        iArr[26][76] = 32;
        iArr[26][77] = 32;
        iArr[26][78] = 32;
        iArr[26][79] = 32;
        iArr[26][80] = 33;
        iArr[26][81] = 33;
        iArr[26][82] = 34;
        iArr[26][83] = 35;
        iArr[26][84] = 35;
        iArr[26][85] = 36;
        iArr[26][86] = 36;
        iArr[26][87] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[26].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[26][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase19() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[27] = new int[83];
        iArr[27][1] = 0;
        iArr[27][2] = 0;
        iArr[27][3] = 0;
        iArr[27][4] = 1;
        iArr[27][5] = 1;
        iArr[27][6] = 2;
        iArr[27][7] = 3;
        iArr[27][8] = 4;
        iArr[27][9] = 5;
        iArr[27][10] = 5;
        iArr[27][11] = 6;
        iArr[27][12] = 6;
        iArr[27][13] = 6;
        iArr[27][14] = 7;
        iArr[27][15] = 7;
        iArr[27][16] = 8;
        iArr[27][17] = 8;
        iArr[27][18] = 9;
        iArr[27][19] = 9;
        iArr[27][20] = 9;
        iArr[27][21] = 9;
        iArr[27][22] = 10;
        iArr[27][23] = 10;
        iArr[27][24] = 10;
        iArr[27][25] = 11;
        iArr[27][26] = 11;
        iArr[27][27] = 12;
        iArr[27][28] = 12;
        iArr[27][29] = 13;
        iArr[27][30] = 13;
        iArr[27][31] = 13;
        iArr[27][32] = 14;
        iArr[27][33] = 14;
        iArr[27][34] = 15;
        iArr[27][35] = 16;
        iArr[27][36] = 17;
        iArr[27][37] = 18;
        iArr[27][38] = 18;
        iArr[27][39] = 18;
        iArr[27][40] = 19;
        iArr[27][41] = 19;
        iArr[27][42] = 19;
        iArr[27][43] = 20;
        iArr[27][44] = 21;
        iArr[27][45] = 22;
        iArr[27][46] = 22;
        iArr[27][47] = 23;
        iArr[27][48] = 23;
        iArr[27][49] = 24;
        iArr[27][50] = 24;
        iArr[27][51] = 25;
        iArr[27][52] = 25;
        iArr[27][53] = 25;
        iArr[27][54] = 26;
        iArr[27][55] = 26;
        iArr[27][56] = 26;
        iArr[27][57] = 27;
        iArr[27][58] = 27;
        iArr[27][59] = 27;
        iArr[27][60] = 28;
        iArr[27][61] = 28;
        iArr[27][62] = 28;
        iArr[27][63] = 28;
        iArr[27][64] = 29;
        iArr[27][65] = 30;
        iArr[27][66] = 30;
        iArr[27][67] = 30;
        iArr[27][68] = 31;
        iArr[27][69] = 31;
        iArr[27][70] = 31;
        iArr[27][71] = 31;
        iArr[27][72] = 32;
        iArr[27][73] = 32;
        iArr[27][74] = 33;
        iArr[27][75] = 34;
        iArr[27][76] = 34;
        iArr[27][77] = 35;
        iArr[27][78] = 36;
        iArr[27][79] = 36;
        iArr[27][80] = 36;
        iArr[27][81] = 37;
        iArr[27][82] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[27].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[27][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase31() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[28] = new int[98];
        iArr[28][1] = 0;
        iArr[28][2] = 0;
        iArr[28][3] = 0;
        iArr[28][4] = 1;
        iArr[28][5] = 1;
        iArr[28][6] = 2;
        iArr[28][7] = 3;
        iArr[28][8] = 4;
        iArr[28][9] = 5;
        iArr[28][10] = 5;
        iArr[28][11] = 6;
        iArr[28][12] = 6;
        iArr[28][13] = 6;
        iArr[28][14] = 7;
        iArr[28][15] = 7;
        iArr[28][16] = 8;
        iArr[28][17] = 8;
        iArr[28][18] = 8;
        iArr[28][19] = 9;
        iArr[28][20] = 9;
        iArr[28][21] = 9;
        iArr[28][22] = 9;
        iArr[28][23] = 9;
        iArr[28][24] = 10;
        iArr[28][25] = 10;
        iArr[28][26] = 10;
        iArr[28][27] = 10;
        iArr[28][28] = 11;
        iArr[28][29] = 11;
        iArr[28][30] = 12;
        iArr[28][31] = 12;
        iArr[28][32] = 12;
        iArr[28][33] = 13;
        iArr[28][34] = 13;
        iArr[28][35] = 13;
        iArr[28][36] = 13;
        iArr[28][37] = 14;
        iArr[28][38] = 14;
        iArr[28][39] = 15;
        iArr[28][40] = 16;
        iArr[28][41] = 17;
        iArr[28][42] = 18;
        iArr[28][43] = 18;
        iArr[28][44] = 18;
        iArr[28][45] = 19;
        iArr[28][46] = 19;
        iArr[28][47] = 19;
        iArr[28][48] = 19;
        iArr[28][49] = 20;
        iArr[28][50] = 21;
        iArr[28][51] = 22;
        iArr[28][52] = 22;
        iArr[28][53] = 23;
        iArr[28][54] = 23;
        iArr[28][55] = 24;
        iArr[28][56] = 24;
        iArr[28][57] = 24;
        iArr[28][58] = 25;
        iArr[28][59] = 25;
        iArr[28][60] = 25;
        iArr[28][61] = 25;
        iArr[28][62] = 26;
        iArr[28][63] = 26;
        iArr[28][64] = 26;
        iArr[28][65] = 26;
        iArr[28][66] = 27;
        iArr[28][67] = 27;
        iArr[28][68] = 27;
        iArr[28][69] = 27;
        iArr[28][70] = 28;
        iArr[28][71] = 28;
        iArr[28][72] = 28;
        iArr[28][73] = 28;
        iArr[28][74] = 28;
        iArr[28][75] = 29;
        iArr[28][76] = 29;
        iArr[28][77] = 30;
        iArr[28][78] = 30;
        iArr[28][79] = 30;
        iArr[28][80] = 31;
        iArr[28][81] = 31;
        iArr[28][82] = 31;
        iArr[28][83] = 31;
        iArr[28][84] = 31;
        iArr[28][85] = 32;
        iArr[28][86] = 32;
        iArr[28][87] = 33;
        iArr[28][88] = 34;
        iArr[28][89] = 34;
        iArr[28][90] = 35;
        iArr[28][91] = 36;
        iArr[28][92] = 36;
        iArr[28][93] = 36;
        iArr[28][94] = 36;
        iArr[28][95] = 37;
        iArr[28][96] = 37;
        iArr[28][97] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[28].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[28][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase18() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[29] = new int[86];
        iArr[29][1] = 0;
        iArr[29][2] = 1;
        iArr[29][3] = 1;
        iArr[29][4] = 3;
        iArr[29][5] = 3;
        iArr[29][6] = 3;
        iArr[29][7] = 4;
        iArr[29][8] = 4;
        iArr[29][9] = 5;
        iArr[29][10] = 5;
        iArr[29][11] = 6;
        iArr[29][12] = 6;
        iArr[29][13] = 6;
        iArr[29][14] = 7;
        iArr[29][15] = 8;
        iArr[29][16] = 8;
        iArr[29][17] = 9;
        iArr[29][18] = 9;
        iArr[29][19] = 9;
        iArr[29][20] = 9;
        iArr[29][21] = 10;
        iArr[29][22] = 10;
        iArr[29][23] = 11;
        iArr[29][24] = 12;
        iArr[29][25] = 12;
        iArr[29][26] = 13;
        iArr[29][27] = 13;
        iArr[29][28] = 13;
        iArr[29][29] = 13;
        iArr[29][30] = 14;
        iArr[29][31] = 14;
        iArr[29][32] = 15;
        iArr[29][33] = 15;
        iArr[29][34] = 16;
        iArr[29][35] = 16;
        iArr[29][36] = 16;
        iArr[29][37] = 17;
        iArr[29][38] = 18;
        iArr[29][39] = 18;
        iArr[29][40] = 18;
        iArr[29][41] = 19;
        iArr[29][42] = 19;
        iArr[29][43] = 19;
        iArr[29][44] = 21;
        iArr[29][45] = 21;
        iArr[29][46] = 21;
        iArr[29][47] = 22;
        iArr[29][48] = 22;
        iArr[29][49] = 23;
        iArr[29][50] = 23;
        iArr[29][51] = 24;
        iArr[29][52] = 24;
        iArr[29][53] = 24;
        iArr[29][54] = 24;
        iArr[29][55] = 25;
        iArr[29][56] = 25;
        iArr[29][57] = 26;
        iArr[29][58] = 26;
        iArr[29][59] = 26;
        iArr[29][60] = 27;
        iArr[29][61] = 27;
        iArr[29][62] = 28;
        iArr[29][63] = 28;
        iArr[29][64] = 29;
        iArr[29][65] = 30;
        iArr[29][66] = 30;
        iArr[29][67] = 30;
        iArr[29][68] = 31;
        iArr[29][69] = 31;
        iArr[29][70] = 31;
        iArr[29][71] = 32;
        iArr[29][72] = 33;
        iArr[29][73] = 33;
        iArr[29][74] = 33;
        iArr[29][75] = 34;
        iArr[29][76] = 34;
        iArr[29][77] = 34;
        iArr[29][78] = 35;
        iArr[29][79] = 36;
        iArr[29][80] = 36;
        iArr[29][81] = 36;
        iArr[29][82] = 36;
        iArr[29][83] = 36;
        iArr[29][84] = 37;
        iArr[29][85] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[29].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[29][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase6() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[30] = new int[88];
        iArr[30][1] = 0;
        iArr[30][2] = 1;
        iArr[30][3] = 1;
        iArr[30][4] = 3;
        iArr[30][5] = 3;
        iArr[30][6] = 3;
        iArr[30][7] = 4;
        iArr[30][8] = 4;
        iArr[30][9] = 5;
        iArr[30][10] = 6;
        iArr[30][11] = 6;
        iArr[30][12] = 6;
        iArr[30][13] = 7;
        iArr[30][14] = 8;
        iArr[30][15] = 8;
        iArr[30][16] = 8;
        iArr[30][17] = 9;
        iArr[30][18] = 9;
        iArr[30][19] = 9;
        iArr[30][20] = 9;
        iArr[30][21] = 10;
        iArr[30][22] = 10;
        iArr[30][23] = 11;
        iArr[30][24] = 11;
        iArr[30][25] = 12;
        iArr[30][26] = 12;
        iArr[30][27] = 12;
        iArr[30][28] = 13;
        iArr[30][29] = 13;
        iArr[30][30] = 13;
        iArr[30][31] = 13;
        iArr[30][32] = 14;
        iArr[30][33] = 15;
        iArr[30][34] = 15;
        iArr[30][35] = 16;
        iArr[30][36] = 16;
        iArr[30][37] = 16;
        iArr[30][38] = 17;
        iArr[30][39] = 18;
        iArr[30][40] = 18;
        iArr[30][41] = 18;
        iArr[30][42] = 19;
        iArr[30][43] = 19;
        iArr[30][44] = 19;
        iArr[30][45] = 21;
        iArr[30][46] = 21;
        iArr[30][47] = 21;
        iArr[30][48] = 21;
        iArr[30][49] = 23;
        iArr[30][50] = 23;
        iArr[30][51] = 24;
        iArr[30][52] = 24;
        iArr[30][53] = 24;
        iArr[30][54] = 24;
        iArr[30][55] = 25;
        iArr[30][56] = 25;
        iArr[30][57] = 26;
        iArr[30][58] = 26;
        iArr[30][59] = 26;
        iArr[30][60] = 26;
        iArr[30][61] = 27;
        iArr[30][62] = 27;
        iArr[30][63] = 28;
        iArr[30][64] = 28;
        iArr[30][65] = 29;
        iArr[30][66] = 29;
        iArr[30][67] = 30;
        iArr[30][68] = 30;
        iArr[30][69] = 30;
        iArr[30][70] = 30;
        iArr[30][71] = 31;
        iArr[30][72] = 31;
        iArr[30][73] = 31;
        iArr[30][74] = 32;
        iArr[30][75] = 33;
        iArr[30][76] = 33;
        iArr[30][77] = 33;
        iArr[30][78] = 33;
        iArr[30][79] = 34;
        iArr[30][80] = 35;
        iArr[30][81] = 35;
        iArr[30][82] = 36;
        iArr[30][83] = 36;
        iArr[30][84] = 36;
        iArr[30][85] = 36;
        iArr[30][86] = 37;
        iArr[30][87] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[30].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[30][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase21() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[31] = new int[94];
        iArr[31][1] = 1;
        iArr[31][2] = 1;
        iArr[31][3] = 1;
        iArr[31][4] = 3;
        iArr[31][5] = 3;
        iArr[31][6] = 3;
        iArr[31][7] = 3;
        iArr[31][8] = 3;
        iArr[31][9] = 3;
        iArr[31][10] = 4;
        iArr[31][11] = 4;
        iArr[31][12] = 4;
        iArr[31][13] = 4;
        iArr[31][14] = 6;
        iArr[31][15] = 6;
        iArr[31][16] = 6;
        iArr[31][17] = 6;
        iArr[31][18] = 7;
        iArr[31][19] = 8;
        iArr[31][20] = 8;
        iArr[31][21] = 9;
        iArr[31][22] = 9;
        iArr[31][23] = 10;
        iArr[31][24] = 11;
        iArr[31][25] = 11;
        iArr[31][26] = 11;
        iArr[31][27] = 12;
        iArr[31][28] = 12;
        iArr[31][29] = 13;
        iArr[31][30] = 13;
        iArr[31][31] = 13;
        iArr[31][32] = 13;
        iArr[31][33] = 13;
        iArr[31][34] = 15;
        iArr[31][35] = 15;
        iArr[31][36] = 15;
        iArr[31][37] = 15;
        iArr[31][38] = 16;
        iArr[31][39] = 16;
        iArr[31][40] = 16;
        iArr[31][41] = 16;
        iArr[31][42] = 16;
        iArr[31][43] = 18;
        iArr[31][44] = 18;
        iArr[31][45] = 18;
        iArr[31][46] = 19;
        iArr[31][47] = 21;
        iArr[31][48] = 21;
        iArr[31][49] = 21;
        iArr[31][50] = 21;
        iArr[31][51] = 21;
        iArr[31][52] = 21;
        iArr[31][53] = 21;
        iArr[31][54] = 23;
        iArr[31][55] = 23;
        iArr[31][56] = 24;
        iArr[31][57] = 24;
        iArr[31][58] = 24;
        iArr[31][59] = 24;
        iArr[31][60] = 24;
        iArr[31][61] = 24;
        iArr[31][62] = 25;
        iArr[31][63] = 26;
        iArr[31][64] = 26;
        iArr[31][65] = 26;
        iArr[31][66] = 26;
        iArr[31][67] = 27;
        iArr[31][68] = 29;
        iArr[31][69] = 29;
        iArr[31][70] = 30;
        iArr[31][71] = 30;
        iArr[31][72] = 30;
        iArr[31][73] = 30;
        iArr[31][74] = 30;
        iArr[31][75] = 31;
        iArr[31][76] = 33;
        iArr[31][77] = 33;
        iArr[31][78] = 33;
        iArr[31][79] = 33;
        iArr[31][80] = 33;
        iArr[31][81] = 33;
        iArr[31][82] = 33;
        iArr[31][83] = 34;
        iArr[31][84] = 34;
        iArr[31][85] = 35;
        iArr[31][86] = 35;
        iArr[31][87] = 36;
        iArr[31][88] = 36;
        iArr[31][89] = 36;
        iArr[31][90] = 36;
        iArr[31][91] = 36;
        iArr[31][92] = 36;
        iArr[31][93] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[31].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[31][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase33() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[32] = new int[112];
        iArr[32][1] = 1;
        iArr[32][2] = 1;
        iArr[32][3] = 1;
        iArr[32][4] = 1;
        iArr[32][5] = 3;
        iArr[32][6] = 3;
        iArr[32][7] = 3;
        iArr[32][8] = 3;
        iArr[32][9] = 3;
        iArr[32][10] = 3;
        iArr[32][11] = 4;
        iArr[32][12] = 4;
        iArr[32][13] = 4;
        iArr[32][14] = 4;
        iArr[32][15] = 5;
        iArr[32][16] = 6;
        iArr[32][17] = 6;
        iArr[32][18] = 6;
        iArr[32][19] = 6;
        iArr[32][20] = 7;
        iArr[32][21] = 7;
        iArr[32][22] = 8;
        iArr[32][23] = 8;
        iArr[32][24] = 9;
        iArr[32][25] = 9;
        iArr[32][26] = 10;
        iArr[32][27] = 10;
        iArr[32][28] = 10;
        iArr[32][29] = 11;
        iArr[32][30] = 11;
        iArr[32][31] = 11;
        iArr[32][32] = 11;
        iArr[32][33] = 12;
        iArr[32][34] = 12;
        iArr[32][35] = 13;
        iArr[32][36] = 13;
        iArr[32][37] = 13;
        iArr[32][38] = 13;
        iArr[32][39] = 13;
        iArr[32][40] = 15;
        iArr[32][41] = 15;
        iArr[32][42] = 15;
        iArr[32][43] = 15;
        iArr[32][44] = 15;
        iArr[32][45] = 16;
        iArr[32][46] = 16;
        iArr[32][47] = 16;
        iArr[32][48] = 16;
        iArr[32][49] = 16;
        iArr[32][50] = 17;
        iArr[32][51] = 18;
        iArr[32][52] = 18;
        iArr[32][53] = 18;
        iArr[32][54] = 19;
        iArr[32][55] = 20;
        iArr[32][56] = 21;
        iArr[32][57] = 21;
        iArr[32][58] = 21;
        iArr[32][59] = 21;
        iArr[32][60] = 21;
        iArr[32][61] = 21;
        iArr[32][62] = 21;
        iArr[32][63] = 22;
        iArr[32][64] = 23;
        iArr[32][65] = 23;
        iArr[32][66] = 24;
        iArr[32][67] = 24;
        iArr[32][68] = 24;
        iArr[32][69] = 24;
        iArr[32][70] = 24;
        iArr[32][71] = 24;
        iArr[32][72] = 25;
        iArr[32][73] = 25;
        iArr[32][74] = 26;
        iArr[32][75] = 26;
        iArr[32][76] = 26;
        iArr[32][77] = 26;
        iArr[32][78] = 27;
        iArr[32][79] = 27;
        iArr[32][80] = 27;
        iArr[32][81] = 29;
        iArr[32][82] = 29;
        iArr[32][83] = 29;
        iArr[32][84] = 30;
        iArr[32][85] = 30;
        iArr[32][86] = 30;
        iArr[32][87] = 30;
        iArr[32][88] = 30;
        iArr[32][89] = 31;
        iArr[32][90] = 32;
        iArr[32][91] = 33;
        iArr[32][92] = 33;
        iArr[32][93] = 33;
        iArr[32][94] = 33;
        iArr[32][95] = 33;
        iArr[32][96] = 33;
        iArr[32][97] = 33;
        iArr[32][98] = 34;
        iArr[32][99] = 34;
        iArr[32][100] = 34;
        iArr[32][101] = 35;
        iArr[32][102] = 35;
        iArr[32][103] = 36;
        iArr[32][104] = 36;
        iArr[32][105] = 36;
        iArr[32][106] = 36;
        iArr[32][107] = 36;
        iArr[32][108] = 36;
        iArr[32][109] = 37;
        iArr[32][110] = 37;
        iArr[32][111] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[32].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[32][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase16() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[33] = new int[98];
        iArr[33][1] = 1;
        iArr[33][2] = 1;
        iArr[33][3] = 1;
        iArr[33][4] = 3;
        iArr[33][5] = 3;
        iArr[33][6] = 3;
        iArr[33][7] = 3;
        iArr[33][8] = 3;
        iArr[33][9] = 3;
        iArr[33][10] = 4;
        iArr[33][11] = 4;
        iArr[33][12] = 4;
        iArr[33][13] = 4;
        iArr[33][14] = 5;
        iArr[33][15] = 5;
        iArr[33][16] = 6;
        iArr[33][17] = 6;
        iArr[33][18] = 6;
        iArr[33][19] = 7;
        iArr[33][20] = 8;
        iArr[33][21] = 9;
        iArr[33][22] = 9;
        iArr[33][23] = 10;
        iArr[33][24] = 10;
        iArr[33][25] = 11;
        iArr[33][26] = 11;
        iArr[33][27] = 12;
        iArr[33][28] = 13;
        iArr[33][29] = 13;
        iArr[33][30] = 13;
        iArr[33][31] = 13;
        iArr[33][32] = 14;
        iArr[33][33] = 15;
        iArr[33][34] = 15;
        iArr[33][35] = 15;
        iArr[33][36] = 15;
        iArr[33][37] = 15;
        iArr[33][38] = 16;
        iArr[33][39] = 16;
        iArr[33][40] = 16;
        iArr[33][41] = 16;
        iArr[33][42] = 16;
        iArr[33][43] = 17;
        iArr[33][44] = 18;
        iArr[33][45] = 18;
        iArr[33][46] = 18;
        iArr[33][47] = 19;
        iArr[33][48] = 20;
        iArr[33][49] = 21;
        iArr[33][50] = 21;
        iArr[33][51] = 21;
        iArr[33][52] = 21;
        iArr[33][53] = 21;
        iArr[33][54] = 22;
        iArr[33][55] = 22;
        iArr[33][56] = 22;
        iArr[33][57] = 23;
        iArr[33][58] = 23;
        iArr[33][59] = 24;
        iArr[33][60] = 24;
        iArr[33][61] = 24;
        iArr[33][62] = 24;
        iArr[33][63] = 24;
        iArr[33][64] = 24;
        iArr[33][65] = 25;
        iArr[33][66] = 26;
        iArr[33][67] = 26;
        iArr[33][68] = 26;
        iArr[33][69] = 27;
        iArr[33][70] = 27;
        iArr[33][71] = 29;
        iArr[33][72] = 29;
        iArr[33][73] = 30;
        iArr[33][74] = 30;
        iArr[33][75] = 30;
        iArr[33][76] = 31;
        iArr[33][77] = 32;
        iArr[33][78] = 33;
        iArr[33][79] = 33;
        iArr[33][80] = 33;
        iArr[33][81] = 33;
        iArr[33][82] = 33;
        iArr[33][83] = 34;
        iArr[33][84] = 34;
        iArr[33][85] = 34;
        iArr[33][86] = 34;
        iArr[33][87] = 34;
        iArr[33][88] = 35;
        iArr[33][89] = 36;
        iArr[33][90] = 36;
        iArr[33][91] = 36;
        iArr[33][92] = 36;
        iArr[33][93] = 36;
        iArr[33][94] = 36;
        iArr[33][95] = 36;
        iArr[33][96] = 37;
        iArr[33][97] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[33].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[33][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase4() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[34] = new int[96];
        iArr[34][1] = 1;
        iArr[34][2] = 1;
        iArr[34][3] = 1;
        iArr[34][4] = 3;
        iArr[34][5] = 3;
        iArr[34][6] = 3;
        iArr[34][7] = 3;
        iArr[34][8] = 3;
        iArr[34][9] = 4;
        iArr[34][10] = 4;
        iArr[34][11] = 4;
        iArr[34][12] = 5;
        iArr[34][13] = 5;
        iArr[34][14] = 5;
        iArr[34][15] = 6;
        iArr[34][16] = 6;
        iArr[34][17] = 7;
        iArr[34][18] = 8;
        iArr[34][19] = 9;
        iArr[34][20] = 10;
        iArr[34][21] = 10;
        iArr[34][22] = 10;
        iArr[34][23] = 11;
        iArr[34][24] = 11;
        iArr[34][25] = 12;
        iArr[34][26] = 13;
        iArr[34][27] = 13;
        iArr[34][28] = 13;
        iArr[34][29] = 14;
        iArr[34][30] = 14;
        iArr[34][31] = 14;
        iArr[34][32] = 15;
        iArr[34][33] = 15;
        iArr[34][34] = 15;
        iArr[34][35] = 15;
        iArr[34][36] = 15;
        iArr[34][37] = 16;
        iArr[34][38] = 16;
        iArr[34][39] = 16;
        iArr[34][40] = 16;
        iArr[34][41] = 17;
        iArr[34][42] = 17;
        iArr[34][43] = 17;
        iArr[34][44] = 18;
        iArr[34][45] = 18;
        iArr[34][46] = 19;
        iArr[34][47] = 20;
        iArr[34][48] = 20;
        iArr[34][49] = 21;
        iArr[34][50] = 21;
        iArr[34][51] = 21;
        iArr[34][52] = 21;
        iArr[34][53] = 22;
        iArr[34][54] = 22;
        iArr[34][55] = 22;
        iArr[34][56] = 22;
        iArr[34][57] = 23;
        iArr[34][58] = 23;
        iArr[34][59] = 23;
        iArr[34][60] = 24;
        iArr[34][61] = 24;
        iArr[34][62] = 24;
        iArr[34][63] = 24;
        iArr[34][64] = 25;
        iArr[34][65] = 25;
        iArr[34][66] = 26;
        iArr[34][67] = 26;
        iArr[34][68] = 27;
        iArr[34][69] = 27;
        iArr[34][70] = 29;
        iArr[34][71] = 29;
        iArr[34][72] = 29;
        iArr[34][73] = 30;
        iArr[34][74] = 30;
        iArr[34][75] = 31;
        iArr[34][76] = 32;
        iArr[34][77] = 32;
        iArr[34][78] = 33;
        iArr[34][79] = 33;
        iArr[34][80] = 33;
        iArr[34][81] = 33;
        iArr[34][82] = 34;
        iArr[34][83] = 34;
        iArr[34][84] = 34;
        iArr[34][85] = 34;
        iArr[34][86] = 34;
        iArr[34][87] = 35;
        iArr[34][88] = 35;
        iArr[34][89] = 36;
        iArr[34][90] = 36;
        iArr[34][91] = 36;
        iArr[34][92] = 36;
        iArr[34][93] = 36;
        iArr[34][94] = 37;
        iArr[34][95] = 37;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[34].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[34][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase23() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[35] = new int[91];
        iArr[35][1] = 0;
        iArr[35][2] = 1;
        iArr[35][3] = 1;
        iArr[35][4] = 3;
        iArr[35][5] = 3;
        iArr[35][6] = 3;
        iArr[35][7] = 3;
        iArr[35][8] = 4;
        iArr[35][9] = 4;
        iArr[35][10] = 4;
        iArr[35][11] = 5;
        iArr[35][12] = 5;
        iArr[35][13] = 5;
        iArr[35][14] = 5;
        iArr[35][15] = 6;
        iArr[35][16] = 6;
        iArr[35][17] = 8;
        iArr[35][18] = 8;
        iArr[35][19] = 9;
        iArr[35][20] = 9;
        iArr[35][21] = 10;
        iArr[35][22] = 10;
        iArr[35][23] = 11;
        iArr[35][24] = 12;
        iArr[35][25] = 12;
        iArr[35][26] = 13;
        iArr[35][27] = 13;
        iArr[35][28] = 14;
        iArr[35][29] = 14;
        iArr[35][30] = 14;
        iArr[35][31] = 14;
        iArr[35][32] = 14;
        iArr[35][33] = 15;
        iArr[35][34] = 15;
        iArr[35][35] = 15;
        iArr[35][36] = 15;
        iArr[35][37] = 16;
        iArr[35][38] = 16;
        iArr[35][39] = 17;
        iArr[35][40] = 17;
        iArr[35][41] = 17;
        iArr[35][42] = 17;
        iArr[35][43] = 17;
        iArr[35][44] = 18;
        iArr[35][45] = 18;
        iArr[35][46] = 19;
        iArr[35][47] = 19;
        iArr[35][48] = 20;
        iArr[35][49] = 20;
        iArr[35][50] = 21;
        iArr[35][51] = 21;
        iArr[35][52] = 22;
        iArr[35][53] = 22;
        iArr[35][54] = 22;
        iArr[35][55] = 22;
        iArr[35][56] = 23;
        iArr[35][57] = 23;
        iArr[35][58] = 23;
        iArr[35][59] = 23;
        iArr[35][60] = 23;
        iArr[35][61] = 24;
        iArr[35][62] = 24;
        iArr[35][63] = 25;
        iArr[35][64] = 25;
        iArr[35][65] = 26;
        iArr[35][66] = 26;
        iArr[35][67] = 28;
        iArr[35][68] = 29;
        iArr[35][69] = 29;
        iArr[35][70] = 29;
        iArr[35][71] = 30;
        iArr[35][72] = 30;
        iArr[35][73] = 31;
        iArr[35][74] = 31;
        iArr[35][75] = 32;
        iArr[35][76] = 32;
        iArr[35][77] = 32;
        iArr[35][78] = 33;
        iArr[35][79] = 33;
        iArr[35][80] = 34;
        iArr[35][81] = 34;
        iArr[35][82] = 34;
        iArr[35][83] = 34;
        iArr[35][84] = 35;
        iArr[35][85] = 35;
        iArr[35][86] = 35;
        iArr[35][87] = 35;
        iArr[35][88] = 36;
        iArr[35][89] = 36;
        iArr[35][90] = 36;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[35].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[35][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase35() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[36] = new int[109];
        iArr[36][1] = 0;
        iArr[36][2] = 1;
        iArr[36][3] = 1;
        iArr[36][4] = 3;
        iArr[36][5] = 3;
        iArr[36][6] = 3;
        iArr[36][7] = 3;
        iArr[36][8] = 3;
        iArr[36][9] = 4;
        iArr[36][10] = 4;
        iArr[36][11] = 4;
        iArr[36][12] = 4;
        iArr[36][13] = 5;
        iArr[36][14] = 5;
        iArr[36][15] = 5;
        iArr[36][16] = 5;
        iArr[36][17] = 5;
        iArr[36][18] = 6;
        iArr[36][19] = 6;
        iArr[36][20] = 8;
        iArr[36][21] = 8;
        iArr[36][22] = 9;
        iArr[36][23] = 9;
        iArr[36][24] = 10;
        iArr[36][25] = 10;
        iArr[36][26] = 10;
        iArr[36][27] = 11;
        iArr[36][28] = 12;
        iArr[36][29] = 12;
        iArr[36][30] = 13;
        iArr[36][31] = 13;
        iArr[36][32] = 14;
        iArr[36][33] = 14;
        iArr[36][34] = 14;
        iArr[36][35] = 14;
        iArr[36][36] = 14;
        iArr[36][37] = 14;
        iArr[36][38] = 15;
        iArr[36][39] = 15;
        iArr[36][40] = 15;
        iArr[36][41] = 15;
        iArr[36][42] = 15;
        iArr[36][43] = 16;
        iArr[36][44] = 16;
        iArr[36][45] = 17;
        iArr[36][46] = 17;
        iArr[36][47] = 17;
        iArr[36][48] = 17;
        iArr[36][49] = 17;
        iArr[36][50] = 17;
        iArr[36][51] = 17;
        iArr[36][52] = 18;
        iArr[36][53] = 18;
        iArr[36][54] = 19;
        iArr[36][55] = 19;
        iArr[36][56] = 20;
        iArr[36][57] = 20;
        iArr[36][58] = 20;
        iArr[36][59] = 21;
        iArr[36][60] = 21;
        iArr[36][61] = 22;
        iArr[36][62] = 22;
        iArr[36][63] = 22;
        iArr[36][64] = 22;
        iArr[36][65] = 22;
        iArr[36][66] = 23;
        iArr[36][67] = 23;
        iArr[36][68] = 23;
        iArr[36][69] = 23;
        iArr[36][70] = 23;
        iArr[36][71] = 23;
        iArr[36][72] = 23;
        iArr[36][73] = 24;
        iArr[36][74] = 24;
        iArr[36][75] = 25;
        iArr[36][76] = 25;
        iArr[36][77] = 25;
        iArr[36][78] = 26;
        iArr[36][79] = 26;
        iArr[36][80] = 28;
        iArr[36][81] = 29;
        iArr[36][82] = 29;
        iArr[36][83] = 29;
        iArr[36][84] = 29;
        iArr[36][85] = 30;
        iArr[36][86] = 30;
        iArr[36][87] = 31;
        iArr[36][88] = 31;
        iArr[36][89] = 32;
        iArr[36][90] = 32;
        iArr[36][91] = 32;
        iArr[36][92] = 32;
        iArr[36][93] = 33;
        iArr[36][94] = 33;
        iArr[36][95] = 34;
        iArr[36][96] = 34;
        iArr[36][97] = 34;
        iArr[36][98] = 34;
        iArr[36][99] = 34;
        iArr[36][100] = 35;
        iArr[36][101] = 35;
        iArr[36][102] = 35;
        iArr[36][103] = 35;
        iArr[36][104] = 35;
        iArr[36][105] = 35;
        iArr[36][106] = 36;
        iArr[36][107] = 36;
        iArr[36][108] = 36;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[36].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[36][i]));
                i++;
            } else {
                return;
            }
        }
    }

    public void matrizBase14() {
        this.auxListDB.clear();
        int[][] iArr = posiblesJugadas;
        iArr[37] = new int[90];
        iArr[37][1] = 0;
        iArr[37][2] = 0;
        iArr[37][3] = 1;
        iArr[37][4] = 2;
        iArr[37][5] = 3;
        iArr[37][6] = 3;
        iArr[37][7] = 3;
        iArr[37][8] = 4;
        iArr[37][9] = 4;
        iArr[37][10] = 4;
        iArr[37][11] = 5;
        iArr[37][12] = 5;
        iArr[37][13] = 5;
        iArr[37][14] = 5;
        iArr[37][15] = 5;
        iArr[37][16] = 6;
        iArr[37][17] = 7;
        iArr[37][18] = 7;
        iArr[37][19] = 8;
        iArr[37][20] = 8;
        iArr[37][21] = 9;
        iArr[37][22] = 9;
        iArr[37][23] = 10;
        iArr[37][24] = 10;
        iArr[37][25] = 11;
        iArr[37][26] = 12;
        iArr[37][27] = 12;
        iArr[37][28] = 13;
        iArr[37][29] = 14;
        iArr[37][30] = 14;
        iArr[37][31] = 14;
        iArr[37][32] = 14;
        iArr[37][33] = 14;
        iArr[37][34] = 15;
        iArr[37][35] = 15;
        iArr[37][36] = 15;
        iArr[37][37] = 16;
        iArr[37][38] = 17;
        iArr[37][39] = 17;
        iArr[37][40] = 17;
        iArr[37][41] = 17;
        iArr[37][42] = 17;
        iArr[37][43] = 17;
        iArr[37][44] = 18;
        iArr[37][45] = 18;
        iArr[37][46] = 19;
        iArr[37][47] = 19;
        iArr[37][48] = 20;
        iArr[37][49] = 20;
        iArr[37][50] = 20;
        iArr[37][51] = 20;
        iArr[37][52] = 22;
        iArr[37][53] = 22;
        iArr[37][54] = 22;
        iArr[37][55] = 22;
        iArr[37][56] = 22;
        iArr[37][57] = 23;
        iArr[37][58] = 23;
        iArr[37][59] = 23;
        iArr[37][60] = 23;
        iArr[37][61] = 23;
        iArr[37][62] = 24;
        iArr[37][63] = 25;
        iArr[37][64] = 25;
        iArr[37][65] = 26;
        iArr[37][66] = 28;
        iArr[37][67] = 29;
        iArr[37][68] = 29;
        iArr[37][69] = 29;
        iArr[37][70] = 30;
        iArr[37][71] = 30;
        iArr[37][72] = 31;
        iArr[37][73] = 31;
        iArr[37][74] = 32;
        iArr[37][75] = 32;
        iArr[37][76] = 32;
        iArr[37][77] = 32;
        iArr[37][78] = 32;
        iArr[37][79] = 34;
        iArr[37][80] = 34;
        iArr[37][81] = 34;
        iArr[37][82] = 34;
        iArr[37][83] = 34;
        iArr[37][84] = 35;
        iArr[37][85] = 35;
        iArr[37][86] = 35;
        iArr[37][87] = 35;
        iArr[37][88] = 36;
        iArr[37][89] = 36;
        int i = 0;
        while (true) {
            int[][] iArr2 = posiblesJugadas;
            if (i < iArr2[37].length) {
                this.auxListDB.add(Integer.valueOf(iArr2[37][i]));
                i++;
            } else {
                return;
            }
        }
    }
}
